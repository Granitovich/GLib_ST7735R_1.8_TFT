
GLib_ST7735R_1.8_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a10  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ab54  08005bd4  08005bd4  00006bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010728  08010728  0001202c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010728  08010728  00011728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010730  08010730  0001202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010730  08010730  00011730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010734  08010734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08010738  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000002c  08010764  0001202c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08010764  0001219c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001202c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dd7  00000000  00000000  0001205c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002517  00000000  00000000  00022e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00025350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000223e2  00000000  00000000  00026320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000158a0  00000000  00000000  00048702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d2fdc  00000000  00000000  0005dfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00130f7e  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000c71  00000000  00000000  00130fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004310  00000000  00000000  00131c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00135f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005bbc 	.word	0x08005bbc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000030 	.word	0x20000030
 8000200:	08005bbc 	.word	0x08005bbc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <demoTFT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void demoTFT(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b08a      	sub	sp, #40	@ 0x28
 8000534:	af04      	add	r7, sp, #16
 ST7735_SetRotation(r);
 8000536:	4b4a      	ldr	r3, [pc, #296]	@ (8000660 <demoTFT+0x130>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fab0 	bl	8001aa0 <ST7735_SetRotation>

 ST7735_FillScreen(ST7735_BLACK);
 8000540:	2000      	movs	r0, #0
 8000542:	f000 fec9 	bl	80012d8 <ST7735_FillScreen>

 for(int x = 0; x < ST7735_GetWidth(); x++)
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	e018      	b.n	800057e <demoTFT+0x4e>
 {
   ST7735_DrawPixel(x, 0, ST7735_WHITE);
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	b29b      	uxth	r3, r3
 8000550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fd58 	bl	800100c <ST7735_DrawPixel>
   ST7735_DrawPixel(x, ST7735_GetHeight() - 1, ST7735_WHITE);
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	b29c      	uxth	r4, r3
 8000560:	f001 fb46 	bl	8001bf0 <ST7735_GetHeight>
 8000564:	4603      	mov	r3, r0
 8000566:	b29b      	uxth	r3, r3
 8000568:	3b01      	subs	r3, #1
 800056a:	b29b      	uxth	r3, r3
 800056c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000570:	4619      	mov	r1, r3
 8000572:	4620      	mov	r0, r4
 8000574:	f000 fd4a 	bl	800100c <ST7735_DrawPixel>
 for(int x = 0; x < ST7735_GetWidth(); x++)
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	3301      	adds	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	f001 fb43 	bl	8001c08 <ST7735_GetWidth>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	4293      	cmp	r3, r2
 800058a:	dbdf      	blt.n	800054c <demoTFT+0x1c>
 }

 for(int y = 0; y < ST7735_GetHeight(); y++)
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	e017      	b.n	80005c2 <demoTFT+0x92>
 {
   ST7735_DrawPixel(0, y, ST7735_WHITE);
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	b29b      	uxth	r3, r3
 8000596:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800059a:	4619      	mov	r1, r3
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fd35 	bl	800100c <ST7735_DrawPixel>
   ST7735_DrawPixel(ST7735_GetWidth() - 1, y, ST7735_WHITE);
 80005a2:	f001 fb31 	bl	8001c08 <ST7735_GetWidth>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	3b01      	subs	r3, #1
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	b291      	uxth	r1, r2
 80005b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fd28 	bl	800100c <ST7735_DrawPixel>
 for(int y = 0; y < ST7735_GetHeight(); y++)
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	3301      	adds	r3, #1
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	f001 fb15 	bl	8001bf0 <ST7735_GetHeight>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	4293      	cmp	r3, r2
 80005ce:	dbe0      	blt.n	8000592 <demoTFT+0x62>
 }

 ST7735_DrawLine(0, 0, ST7735_GetWidth(), ST7735_GetHeight(), ST7735_WHITE);
 80005d0:	f001 fb1a 	bl	8001c08 <ST7735_GetWidth>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461c      	mov	r4, r3
 80005d8:	f001 fb0a 	bl	8001bf0 <ST7735_GetHeight>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	4613      	mov	r3, r2
 80005e8:	4622      	mov	r2, r4
 80005ea:	2100      	movs	r1, #0
 80005ec:	2000      	movs	r0, #0
 80005ee:	f001 f936 	bl	800185e <ST7735_DrawLine>
 ST7735_DrawLine(ST7735_GetWidth(), 0, 0, ST7735_GetHeight(), ST7735_WHITE);
 80005f2:	f001 fb09 	bl	8001c08 <ST7735_GetWidth>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461c      	mov	r4, r3
 80005fa:	f001 faf9 	bl	8001bf0 <ST7735_GetHeight>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	4613      	mov	r3, r2
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	4620      	mov	r0, r4
 8000610:	f001 f925 	bl	800185e <ST7735_DrawLine>

 HAL_Delay(2000);
 8000614:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000618:	f001 fd06 	bl	8002028 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fe5b 	bl	80012d8 <ST7735_FillScreen>

 for (int i = 0; i < ST7735_GetHeight(); i += 4)
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e011      	b.n	800064c <demoTFT+0x11c>
 {
  ST7735_DrawFastHLine(0, i, ST7735_GetWidth() - 1, ST7735_WHITE);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	b21c      	sxth	r4, r3
 800062c:	f001 faec 	bl	8001c08 <ST7735_GetWidth>
 8000630:	4603      	mov	r3, r0
 8000632:	b29b      	uxth	r3, r3
 8000634:	3b01      	subs	r3, #1
 8000636:	b29b      	uxth	r3, r3
 8000638:	b21a      	sxth	r2, r3
 800063a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800063e:	4621      	mov	r1, r4
 8000640:	2000      	movs	r0, #0
 8000642:	f001 f9ed 	bl	8001a20 <ST7735_DrawFastHLine>
 for (int i = 0; i < ST7735_GetHeight(); i += 4)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3304      	adds	r3, #4
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	f001 fad0 	bl	8001bf0 <ST7735_GetHeight>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4293      	cmp	r3, r2
 8000658:	dbe6      	blt.n	8000628 <demoTFT+0xf8>
 }

 for (int i = 0; i < ST7735_GetWidth(); i += 4)
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	e013      	b.n	8000688 <demoTFT+0x158>
 8000660:	20000048 	.word	0x20000048
 {
  ST7735_DrawFastVLine(i, 0, ST7735_GetHeight() - 1, ST7735_WHITE);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	b21c      	sxth	r4, r3
 8000668:	f001 fac2 	bl	8001bf0 <ST7735_GetHeight>
 800066c:	4603      	mov	r3, r0
 800066e:	b29b      	uxth	r3, r3
 8000670:	3b01      	subs	r3, #1
 8000672:	b29b      	uxth	r3, r3
 8000674:	b21a      	sxth	r2, r3
 8000676:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800067a:	2100      	movs	r1, #0
 800067c:	4620      	mov	r0, r4
 800067e:	f001 f98d 	bl	800199c <ST7735_DrawFastVLine>
 for (int i = 0; i < ST7735_GetWidth(); i += 4)
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	3304      	adds	r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	f001 fabe 	bl	8001c08 <ST7735_GetWidth>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4293      	cmp	r3, r2
 8000694:	dbe6      	blt.n	8000664 <demoTFT+0x134>
 }

 HAL_Delay(2000);
 8000696:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800069a:	f001 fcc5 	bl	8002028 <HAL_Delay>

 // Check fonts
 ST7735_FillScreen(ST7735_BLACK);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 fe1a 	bl	80012d8 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 80006a4:	4ba0      	ldr	r3, [pc, #640]	@ (8000928 <demoTFT+0x3f8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	9202      	str	r2, [sp, #8]
 80006aa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80006ae:	9201      	str	r2, [sp, #4]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	9200      	str	r2, [sp, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a9d      	ldr	r2, [pc, #628]	@ (800092c <demoTFT+0x3fc>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 fcea 	bl	8001094 <ST7735_DrawString>
 ST7735_DrawString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80006c0:	4b9b      	ldr	r3, [pc, #620]	@ (8000930 <demoTFT+0x400>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	9202      	str	r2, [sp, #8]
 80006c6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	685a      	ldr	r2, [r3, #4]
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a98      	ldr	r2, [pc, #608]	@ (8000934 <demoTFT+0x404>)
 80006d4:	211e      	movs	r1, #30
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fcdc 	bl	8001094 <ST7735_DrawString>
 ST7735_DrawString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80006dc:	4b96      	ldr	r3, [pc, #600]	@ (8000938 <demoTFT+0x408>)
 80006de:	2200      	movs	r2, #0
 80006e0:	9202      	str	r2, [sp, #8]
 80006e2:	221f      	movs	r2, #31
 80006e4:	9201      	str	r2, [sp, #4]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a93      	ldr	r2, [pc, #588]	@ (800093c <demoTFT+0x40c>)
 80006ee:	2154      	movs	r1, #84	@ 0x54
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fccf 	bl	8001094 <ST7735_DrawString>
 HAL_Delay(2000);
 80006f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006fa:	f001 fc95 	bl	8002028 <HAL_Delay>

 // Check colors
 ST7735_FillScreen(ST7735_BLACK);
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 fdea 	bl	80012d8 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 8000704:	4b8a      	ldr	r3, [pc, #552]	@ (8000930 <demoTFT+0x400>)
 8000706:	2200      	movs	r2, #0
 8000708:	9202      	str	r2, [sp, #8]
 800070a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a8a      	ldr	r2, [pc, #552]	@ (8000940 <demoTFT+0x410>)
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fcba 	bl	8001094 <ST7735_DrawString>
 HAL_Delay(500);
 8000720:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000724:	f001 fc80 	bl	8002028 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLUE);
 8000728:	201f      	movs	r0, #31
 800072a:	f000 fdd5 	bl	80012d8 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 800072e:	4b80      	ldr	r3, [pc, #512]	@ (8000930 <demoTFT+0x400>)
 8000730:	221f      	movs	r2, #31
 8000732:	9202      	str	r2, [sp, #8]
 8000734:	2200      	movs	r2, #0
 8000736:	9201      	str	r2, [sp, #4]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	9200      	str	r2, [sp, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a81      	ldr	r2, [pc, #516]	@ (8000944 <demoTFT+0x414>)
 8000740:	2100      	movs	r1, #0
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fca6 	bl	8001094 <ST7735_DrawString>
 HAL_Delay(500);
 8000748:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800074c:	f001 fc6c 	bl	8002028 <HAL_Delay>

 ST7735_FillScreen(ST7735_RED);
 8000750:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000754:	f000 fdc0 	bl	80012d8 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 8000758:	4b75      	ldr	r3, [pc, #468]	@ (8000930 <demoTFT+0x400>)
 800075a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800075e:	9202      	str	r2, [sp, #8]
 8000760:	2200      	movs	r2, #0
 8000762:	9201      	str	r2, [sp, #4]
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	9200      	str	r2, [sp, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a77      	ldr	r2, [pc, #476]	@ (8000948 <demoTFT+0x418>)
 800076c:	2100      	movs	r1, #0
 800076e:	2000      	movs	r0, #0
 8000770:	f000 fc90 	bl	8001094 <ST7735_DrawString>
 HAL_Delay(500);
 8000774:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000778:	f001 fc56 	bl	8002028 <HAL_Delay>

 ST7735_FillScreen(ST7735_GREEN);
 800077c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000780:	f000 fdaa 	bl	80012d8 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 8000784:	4b6a      	ldr	r3, [pc, #424]	@ (8000930 <demoTFT+0x400>)
 8000786:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800078a:	9202      	str	r2, [sp, #8]
 800078c:	2200      	movs	r2, #0
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	9200      	str	r2, [sp, #0]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a6d      	ldr	r2, [pc, #436]	@ (800094c <demoTFT+0x41c>)
 8000798:	2100      	movs	r1, #0
 800079a:	2000      	movs	r0, #0
 800079c:	f000 fc7a 	bl	8001094 <ST7735_DrawString>
 HAL_Delay(500);
 80007a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a4:	f001 fc40 	bl	8002028 <HAL_Delay>

 ST7735_FillScreen(ST7735_CYAN);
 80007a8:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 80007ac:	f000 fd94 	bl	80012d8 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 80007b0:	4b5f      	ldr	r3, [pc, #380]	@ (8000930 <demoTFT+0x400>)
 80007b2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007b6:	9202      	str	r2, [sp, #8]
 80007b8:	2200      	movs	r2, #0
 80007ba:	9201      	str	r2, [sp, #4]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	9200      	str	r2, [sp, #0]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a63      	ldr	r2, [pc, #396]	@ (8000950 <demoTFT+0x420>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 fc64 	bl	8001094 <ST7735_DrawString>
 HAL_Delay(500);
 80007cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007d0:	f001 fc2a 	bl	8002028 <HAL_Delay>

 ST7735_FillScreen(ST7735_MAGENTA);
 80007d4:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80007d8:	f000 fd7e 	bl	80012d8 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 80007dc:	4b54      	ldr	r3, [pc, #336]	@ (8000930 <demoTFT+0x400>)
 80007de:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80007e2:	9202      	str	r2, [sp, #8]
 80007e4:	2200      	movs	r2, #0
 80007e6:	9201      	str	r2, [sp, #4]
 80007e8:	685a      	ldr	r2, [r3, #4]
 80007ea:	9200      	str	r2, [sp, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a59      	ldr	r2, [pc, #356]	@ (8000954 <demoTFT+0x424>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 fc4e 	bl	8001094 <ST7735_DrawString>
 HAL_Delay(500);
 80007f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007fc:	f001 fc14 	bl	8002028 <HAL_Delay>

 ST7735_FillScreen(ST7735_YELLOW);
 8000800:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000804:	f000 fd68 	bl	80012d8 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 8000808:	4b49      	ldr	r3, [pc, #292]	@ (8000930 <demoTFT+0x400>)
 800080a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800080e:	9202      	str	r2, [sp, #8]
 8000810:	2200      	movs	r2, #0
 8000812:	9201      	str	r2, [sp, #4]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	9200      	str	r2, [sp, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a4f      	ldr	r2, [pc, #316]	@ (8000958 <demoTFT+0x428>)
 800081c:	2100      	movs	r1, #0
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fc38 	bl	8001094 <ST7735_DrawString>
 HAL_Delay(500);
 8000824:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000828:	f001 fbfe 	bl	8002028 <HAL_Delay>

 ST7735_FillScreen(ST7735_WHITE);
 800082c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000830:	f000 fd52 	bl	80012d8 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000834:	4b3e      	ldr	r3, [pc, #248]	@ (8000930 <demoTFT+0x400>)
 8000836:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083a:	9202      	str	r2, [sp, #8]
 800083c:	2200      	movs	r2, #0
 800083e:	9201      	str	r2, [sp, #4]
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	9200      	str	r2, [sp, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a45      	ldr	r2, [pc, #276]	@ (800095c <demoTFT+0x42c>)
 8000848:	2100      	movs	r1, #0
 800084a:	2000      	movs	r0, #0
 800084c:	f000 fc22 	bl	8001094 <ST7735_DrawString>
 HAL_Delay(500);
 8000850:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000854:	f001 fbe8 	bl	8002028 <HAL_Delay>

 // Draw circles
 ST7735_FillScreen(ST7735_BLACK);
 8000858:	2000      	movs	r0, #0
 800085a:	f000 fd3d 	bl	80012d8 <ST7735_FillScreen>
 for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	e017      	b.n	8000894 <demoTFT+0x364>
 {
  ST7735_DrawCircle(ST7735_GetWidth() / 2, ST7735_GetHeight() / 2, i, ST7735_YELLOW);
 8000864:	f001 f9d0 	bl	8001c08 <ST7735_GetWidth>
 8000868:	4603      	mov	r3, r0
 800086a:	0fda      	lsrs	r2, r3, #31
 800086c:	4413      	add	r3, r2
 800086e:	105b      	asrs	r3, r3, #1
 8000870:	b21c      	sxth	r4, r3
 8000872:	f001 f9bd 	bl	8001bf0 <ST7735_GetHeight>
 8000876:	4603      	mov	r3, r0
 8000878:	0fda      	lsrs	r2, r3, #31
 800087a:	4413      	add	r3, r2
 800087c:	105b      	asrs	r3, r3, #1
 800087e:	b219      	sxth	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	b21a      	sxth	r2, r3
 8000884:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000888:	4620      	mov	r0, r4
 800088a:	f000 fdb1 	bl	80013f0 <ST7735_DrawCircle>
 for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3302      	adds	r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	f001 f9ac 	bl	8001bf0 <ST7735_GetHeight>
 8000898:	4603      	mov	r3, r0
 800089a:	0fda      	lsrs	r2, r3, #31
 800089c:	4413      	add	r3, r2
 800089e:	105b      	asrs	r3, r3, #1
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4293      	cmp	r3, r2
 80008a8:	dbdc      	blt.n	8000864 <demoTFT+0x334>
 }
 HAL_Delay(1000);
 80008aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ae:	f001 fbbb 	bl	8002028 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 fd10 	bl	80012d8 <ST7735_FillScreen>
 ST7735_FillTriangle(0, 0, ST7735_GetWidth() / 2, ST7735_GetHeight(), ST7735_GetWidth(), 0, ST7735_RED);
 80008b8:	f001 f9a6 	bl	8001c08 <ST7735_GetWidth>
 80008bc:	4603      	mov	r3, r0
 80008be:	0fda      	lsrs	r2, r3, #31
 80008c0:	4413      	add	r3, r2
 80008c2:	105b      	asrs	r3, r3, #1
 80008c4:	b21c      	sxth	r4, r3
 80008c6:	f001 f993 	bl	8001bf0 <ST7735_GetHeight>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461d      	mov	r5, r3
 80008ce:	f001 f99b 	bl	8001c08 <ST7735_GetWidth>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008da:	9302      	str	r3, [sp, #8]
 80008dc:	2300      	movs	r3, #0
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	9200      	str	r2, [sp, #0]
 80008e2:	462b      	mov	r3, r5
 80008e4:	4622      	mov	r2, r4
 80008e6:	2100      	movs	r1, #0
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fe53 	bl	8001594 <ST7735_FillTriangle>
 HAL_Delay(1000);
 80008ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008f2:	f001 fb99 	bl	8002028 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 fcee 	bl	80012d8 <ST7735_FillScreen>
 ST7735_DrawImage(0, 0, 128, 128, (uint16_t*) test_img_128x128);
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <demoTFT+0x430>)
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	2280      	movs	r2, #128	@ 0x80
 8000904:	2100      	movs	r1, #0
 8000906:	2000      	movs	r0, #0
 8000908:	f000 fd02 	bl	8001310 <ST7735_DrawImage>
 HAL_Delay(3000);
 800090c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000910:	f001 fb8a 	bl	8002028 <HAL_Delay>

 r++;
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <demoTFT+0x434>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <demoTFT+0x434>)
 800091e:	701a      	strb	r2, [r3, #0]
}
 8000920:	bf00      	nop
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bdb0      	pop	{r4, r5, r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	08005bd4 	.word	0x08005bd4
 8000930:	20000008 	.word	0x20000008
 8000934:	08005c08 	.word	0x08005c08
 8000938:	20000010 	.word	0x20000010
 800093c:	08005c28 	.word	0x08005c28
 8000940:	08005c34 	.word	0x08005c34
 8000944:	08005c3c 	.word	0x08005c3c
 8000948:	08005c44 	.word	0x08005c44
 800094c:	08005c48 	.word	0x08005c48
 8000950:	08005c50 	.word	0x08005c50
 8000954:	08005c58 	.word	0x08005c58
 8000958:	08005c60 	.word	0x08005c60
 800095c:	08005c68 	.word	0x08005c68
 8000960:	08008690 	.word	0x08008690
 8000964:	20000048 	.word	0x20000048

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f001 faea 	bl	8001f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f812 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f000 f930 	bl	8000bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000978:	f000 f90e 	bl	8000b98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800097c:	f000 f8e2 	bl	8000b44 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000980:	f000 f876 	bl	8000a70 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000984:	f000 f8aa 	bl	8000adc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000988:	f000 fb1e 	bl	8000fc8 <ST7735_Init>
  ST7735_Backlight_On();
 800098c:	f000 fd22 	bl	80013d4 <ST7735_Backlight_On>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  demoTFT();
 8000990:	f7ff fdce 	bl	8000530 <demoTFT>
 8000994:	e7fc      	b.n	8000990 <main+0x28>
	...

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b094      	sub	sp, #80	@ 0x50
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2234      	movs	r2, #52	@ 0x34
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 f8dc 	bl	8005b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <SystemClock_Config+0xd0>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <SystemClock_Config+0xd0>)
 80009c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80009cc:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <SystemClock_Config+0xd0>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009d8:	2300      	movs	r3, #0
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <SystemClock_Config+0xd4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009e4:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <SystemClock_Config+0xd4>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <SystemClock_Config+0xd4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fc:	2301      	movs	r3, #1
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a00:	2310      	movs	r3, #16
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a04:	2302      	movs	r3, #2
 8000a06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a10:	2348      	movs	r3, #72	@ 0x48
 8000a12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 f8a5 	bl	8003b74 <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a30:	f000 f95c 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	230f      	movs	r3, #15
 8000a36:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fc85 	bl	8003360 <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a5c:	f000 f946 	bl	8000cec <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3750      	adds	r7, #80	@ 0x50
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40007000 	.word	0x40007000

08000a70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000a76:	4a18      	ldr	r2, [pc, #96]	@ (8000ad8 <MX_SPI1_Init+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000a7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a82:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000abc:	220a      	movs	r2, #10
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <MX_SPI1_Init+0x64>)
 8000ac2:	f003 fbb7 	bl	8004234 <HAL_SPI_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000acc:	f000 f90e 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000004c 	.word	0x2000004c
 8000ad8:	40013000 	.word	0x40013000

08000adc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_TIM6_Init+0x60>)
 8000aec:	4a14      	ldr	r2, [pc, #80]	@ (8000b40 <MX_TIM6_Init+0x64>)
 8000aee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 150;
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_TIM6_Init+0x60>)
 8000af2:	2296      	movs	r2, #150	@ 0x96
 8000af4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_TIM6_Init+0x60>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_TIM6_Init+0x60>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_TIM6_Init+0x60>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <MX_TIM6_Init+0x60>)
 8000b0a:	f004 f8c1 	bl	8004c90 <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000b14:	f000 f8ea 	bl	8000cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_TIM6_Init+0x60>)
 8000b26:	f004 fb93 	bl	8005250 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000b30:	f000 f8dc 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000104 	.word	0x20000104
 8000b40:	40001000 	.word	0x40001000

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <MX_USART2_UART_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	f004 fc5a 	bl	8005434 <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b86:	f000 f8b1 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000014c 	.word	0x2000014c
 8000b94:	40004400 	.word	0x40004400

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_DMA_Init+0x3c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	203b      	movs	r0, #59	@ 0x3b
 8000bc0:	f001 fb46 	bl	8002250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000bc4:	203b      	movs	r0, #59	@ 0x3b
 8000bc6:	f001 fb6f 	bl	80022a8 <HAL_NVIC_EnableIRQ>

}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8000cdc <MX_GPIO_Init+0x104>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a39      	ldr	r2, [pc, #228]	@ (8000cdc <MX_GPIO_Init+0x104>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b37      	ldr	r3, [pc, #220]	@ (8000cdc <MX_GPIO_Init+0x104>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b33      	ldr	r3, [pc, #204]	@ (8000cdc <MX_GPIO_Init+0x104>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a32      	ldr	r2, [pc, #200]	@ (8000cdc <MX_GPIO_Init+0x104>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b30      	ldr	r3, [pc, #192]	@ (8000cdc <MX_GPIO_Init+0x104>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <MX_GPIO_Init+0x104>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000cdc <MX_GPIO_Init+0x104>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <MX_GPIO_Init+0x104>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_pin_GPIO_Port, Test_pin_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2108      	movs	r1, #8
 8000c46:	4826      	ldr	r0, [pc, #152]	@ (8000ce0 <MX_GPIO_Init+0x108>)
 8000c48:	f002 fb5e 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2120      	movs	r1, #32
 8000c50:	4824      	ldr	r0, [pc, #144]	@ (8000ce4 <MX_GPIO_Init+0x10c>)
 8000c52:	f002 fb59 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c5c:	4822      	ldr	r0, [pc, #136]	@ (8000ce8 <MX_GPIO_Init+0x110>)
 8000c5e:	f002 fb53 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c68:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	4819      	ldr	r0, [pc, #100]	@ (8000ce0 <MX_GPIO_Init+0x108>)
 8000c7a:	f002 f823 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Test_pin_Pin */
  GPIO_InitStruct.Pin = Test_pin_Pin;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Test_pin_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	4812      	ldr	r0, [pc, #72]	@ (8000ce0 <MX_GPIO_Init+0x108>)
 8000c96:	f002 f815 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <MX_GPIO_Init+0x10c>)
 8000cb2:	f002 f807 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_RES_Pin ST7735_DC_Pin ST7735_CS_Pin ST7735_BL_Pin */
  GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
 8000cb6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <MX_GPIO_Init+0x110>)
 8000cd0:	f001 fff8 	bl	8002cc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40020400 	.word	0x40020400

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <ST7735_Reset>:

static void ST7735_Reset()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	TFT_RES_L();
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <ST7735_Reset+0x20>)
 8000d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d2a:	619a      	str	r2, [r3, #24]
	HAL_Delay(20);
 8000d2c:	2014      	movs	r0, #20
 8000d2e:	f001 f97b 	bl	8002028 <HAL_Delay>
	TFT_RES_H();
 8000d32:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <ST7735_Reset+0x20>)
 8000d34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d38:	619a      	str	r2, [r3, #24]
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40020400 	.word	0x40020400

08000d44 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	TFT_DC_C();
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <ST7735_WriteCommand+0x28>)
 8000d50:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d54:	619a      	str	r2, [r3, #24]
#ifdef USE_SPI_DMA
  completed1 = 0;
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
	//while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else*/
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000d56:	1df9      	adds	r1, r7, #7
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <ST7735_WriteCommand+0x2c>)
 8000d60:	f003 fbfc 	bl	800455c <HAL_SPI_Transmit>
//#endif
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	2000004c 	.word	0x2000004c

08000d74 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	TFT_DC_D();
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <ST7735_WriteData+0x38>)
 8000d80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d84:	619a      	str	r2, [r3, #24]
#ifdef USE_SPI_DMA
	HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	4808      	ldr	r0, [pc, #32]	@ (8000db0 <ST7735_WriteData+0x3c>)
 8000d90:	f003 fd38 	bl	8004804 <HAL_SPI_Transmit_DMA>
	while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
 8000d94:	bf00      	nop
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <ST7735_WriteData+0x3c>)
 8000d98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d0f9      	beq.n	8000d96 <ST7735_WriteData+0x22>
#else
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
#endif
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40020400 	.word	0x40020400
 8000db0:	2000004c 	.word	0x2000004c

08000db4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8000dc6:	e034      	b.n	8000e32 <ST7735_ExecuteCommandList+0x7e>
    {
    	uint8_t cmd = *addr++;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ffb5 	bl	8000d44 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000de4:	7abb      	ldrb	r3, [r7, #10]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dec:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000dee:	7abb      	ldrb	r3, [r7, #10]
 8000df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000df4:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8000df6:	7abb      	ldrb	r3, [r7, #10]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d008      	beq.n	8000e0e <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000dfc:	7abb      	ldrb	r3, [r7, #10]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffb7 	bl	8000d74 <ST7735_WriteData>
            addr += numArgs;
 8000e06:	7abb      	ldrb	r3, [r7, #10]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8000e0e:	89bb      	ldrh	r3, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00e      	beq.n	8000e32 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000e1e:	89bb      	ldrh	r3, [r7, #12]
 8000e20:	2bff      	cmp	r3, #255	@ 0xff
 8000e22:	d102      	bne.n	8000e2a <ST7735_ExecuteCommandList+0x76>
 8000e24:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e28:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000e2a:	89bb      	ldrh	r3, [r7, #12]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 f8fb 	bl	8002028 <HAL_Delay>
    while(numCommands--)
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	1e5a      	subs	r2, r3, #1
 8000e36:	73fa      	strb	r2, [r7, #15]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1c5      	bne.n	8000dc8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4604      	mov	r4, r0
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4623      	mov	r3, r4
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71bb      	strb	r3, [r7, #6]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	717b      	strb	r3, [r7, #5]
 8000e62:	4613      	mov	r3, r2
 8000e64:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000e66:	202a      	movs	r0, #42	@ 0x2a
 8000e68:	f7ff ff6c 	bl	8000d44 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	733b      	strb	r3, [r7, #12]
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <ST7735_SetAddressWindow+0x88>)
 8000e72:	781a      	ldrb	r2, [r3, #0]
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4413      	add	r3, r2
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	737b      	strb	r3, [r7, #13]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73bb      	strb	r3, [r7, #14]
 8000e80:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <ST7735_SetAddressWindow+0x88>)
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	4413      	add	r3, r2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2104      	movs	r1, #4
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff6e 	bl	8000d74 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000e98:	202b      	movs	r0, #43	@ 0x2b
 8000e9a:	f7ff ff53 	bl	8000d44 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <ST7735_SetAddressWindow+0x8c>)
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <ST7735_SetAddressWindow+0x8c>)
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	793b      	ldrb	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2104      	movs	r1, #4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff59 	bl	8000d74 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000ec2:	202c      	movs	r0, #44	@ 0x2c
 8000ec4:	f7ff ff3e 	bl	8000d44 <ST7735_WriteCommand>
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	20000195 	.word	0x20000195
 8000ed4:	20000196 	.word	0x20000196

08000ed8 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000ed8:	b082      	sub	sp, #8
 8000eda:	b590      	push	{r4, r7, lr}
 8000edc:	b089      	sub	sp, #36	@ 0x24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	80bb      	strh	r3, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	b2d8      	uxtb	r0, r3
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	b2d9      	uxtb	r1, r3
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000efe:	4413      	add	r3, r2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	3b01      	subs	r3, #1
 8000f04:	b2dc      	uxtb	r4, r3
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f0e:	4413      	add	r3, r2
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4622      	mov	r2, r4
 8000f18:	f7ff ff96 	bl	8000e48 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	e043      	b.n	8000faa <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8000f22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	3b20      	subs	r3, #32
 8000f28:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000f2c:	fb01 f303 	mul.w	r3, r1, r3
 8000f30:	4619      	mov	r1, r3
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	440b      	add	r3, r1
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	e029      	b.n	8000f98 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00e      	beq.n	8000f72 <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000f54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	743b      	strb	r3, [r7, #16]
 8000f5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff02 	bl	8000d74 <ST7735_WriteData>
 8000f70:	e00f      	b.n	8000f92 <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000f72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000f76:	0a1b      	lsrs	r3, r3, #8
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	733b      	strb	r3, [r7, #12]
 8000f7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fef1 	bl	8000d74 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	3301      	adds	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d3cf      	bcc.n	8000f44 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000fae:	461a      	mov	r2, r3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d3b5      	bcc.n	8000f22 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	3724      	adds	r7, #36	@ 0x24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000fc2:	b002      	add	sp, #8
 8000fc4:	4770      	bx	lr
	...

08000fc8 <ST7735_Init>:

void ST7735_Init()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	ST7735_GPIO_Init();
 8000fcc:	f7ff fea0 	bl	8000d10 <ST7735_GPIO_Init>
	TFT_CS_L();
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <ST7735_Init+0x34>)
 8000fd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fd6:	619a      	str	r2, [r3, #24]
    ST7735_Reset();
 8000fd8:	f7ff fea2 	bl	8000d20 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000fdc:	4808      	ldr	r0, [pc, #32]	@ (8001000 <ST7735_Init+0x38>)
 8000fde:	f7ff fee9 	bl	8000db4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000fe2:	4808      	ldr	r0, [pc, #32]	@ (8001004 <ST7735_Init+0x3c>)
 8000fe4:	f7ff fee6 	bl	8000db4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000fe8:	4807      	ldr	r0, [pc, #28]	@ (8001008 <ST7735_Init+0x40>)
 8000fea:	f7ff fee3 	bl	8000db4 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8000fee:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <ST7735_Init+0x34>)
 8000ff0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020400 	.word	0x40020400
 8001000:	08010690 	.word	0x08010690
 8001004:	080106cc 	.word	0x080106cc
 8001008:	080106dc 	.word	0x080106dc

0800100c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
 8001016:	460b      	mov	r3, r1
 8001018:	80bb      	strh	r3, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	4a19      	ldr	r2, [pc, #100]	@ (8001088 <ST7735_DrawPixel+0x7c>)
 8001022:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001026:	4293      	cmp	r3, r2
 8001028:	da2a      	bge.n	8001080 <ST7735_DrawPixel+0x74>
 800102a:	88bb      	ldrh	r3, [r7, #4]
 800102c:	4a17      	ldr	r2, [pc, #92]	@ (800108c <ST7735_DrawPixel+0x80>)
 800102e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001032:	4293      	cmp	r3, r2
 8001034:	da24      	bge.n	8001080 <ST7735_DrawPixel+0x74>
        return;

    TFT_CS_L();
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <ST7735_DrawPixel+0x84>)
 8001038:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800103c:	619a      	str	r2, [r3, #24]

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	b2d8      	uxtb	r0, r3
 8001042:	88bb      	ldrh	r3, [r7, #4]
 8001044:	b2d9      	uxtb	r1, r3
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	3301      	adds	r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f7ff fef7 	bl	8000e48 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	b29b      	uxth	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	733b      	strb	r3, [r7, #12]
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2102      	movs	r1, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fe7f 	bl	8000d74 <ST7735_WriteData>

    TFT_CS_H();
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <ST7735_DrawPixel+0x84>)
 8001078:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107c:	619a      	str	r2, [r3, #24]
 800107e:	e000      	b.n	8001082 <ST7735_DrawPixel+0x76>
        return;
 8001080:	bf00      	nop
}
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000001e 	.word	0x2000001e
 800108c:	2000001c 	.word	0x2000001c
 8001090:	40020400 	.word	0x40020400

08001094 <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001094:	b082      	sub	sp, #8
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af04      	add	r7, sp, #16
 800109c:	603a      	str	r2, [r7, #0]
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	4603      	mov	r3, r0
 80010a2:	80fb      	strh	r3, [r7, #6]
 80010a4:	460b      	mov	r3, r1
 80010a6:	80bb      	strh	r3, [r7, #4]
	TFT_CS_L();
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <ST7735_DrawString+0xa8>)
 80010aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ae:	619a      	str	r2, [r3, #24]

    while(*str)
 80010b0:	e033      	b.n	800111a <ST7735_DrawString+0x86>
    {
        if(x + font.width >= _width)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	7d3a      	ldrb	r2, [r7, #20]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a21      	ldr	r2, [pc, #132]	@ (8001140 <ST7735_DrawString+0xac>)
 80010ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010be:	4293      	cmp	r3, r2
 80010c0:	db16      	blt.n	80010f0 <ST7735_DrawString+0x5c>
        {
            x = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80010c6:	7d7b      	ldrb	r3, [r7, #21]
 80010c8:	461a      	mov	r2, r3
 80010ca:	88bb      	ldrh	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 80010d0:	88bb      	ldrh	r3, [r7, #4]
 80010d2:	7d7a      	ldrb	r2, [r7, #21]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001144 <ST7735_DrawString+0xb0>)
 80010d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010dc:	4293      	cmp	r3, r2
 80010de:	da21      	bge.n	8001124 <ST7735_DrawString+0x90>
            {
                break;
            }

            if(*str == ' ')
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b20      	cmp	r3, #32
 80010e6:	d103      	bne.n	80010f0 <ST7735_DrawString+0x5c>
            {
                // skip spaces in the beginning of the new line
                str++;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	603b      	str	r3, [r7, #0]
                continue;
 80010ee:	e014      	b.n	800111a <ST7735_DrawString+0x86>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	781a      	ldrb	r2, [r3, #0]
 80010f4:	88b9      	ldrh	r1, [r7, #4]
 80010f6:	88f8      	ldrh	r0, [r7, #6]
 80010f8:	8c3b      	ldrh	r3, [r7, #32]
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	8bbb      	ldrh	r3, [r7, #28]
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f7ff fee7 	bl	8000ed8 <ST7735_WriteChar>
        x += font.width;
 800110a:	7d3b      	ldrb	r3, [r7, #20]
 800110c:	461a      	mov	r2, r3
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	4413      	add	r3, r2
 8001112:	80fb      	strh	r3, [r7, #6]
        str++;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	603b      	str	r3, [r7, #0]
    while(*str)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1c7      	bne.n	80010b2 <ST7735_DrawString+0x1e>
 8001122:	e000      	b.n	8001126 <ST7735_DrawString+0x92>
                break;
 8001124:	bf00      	nop
    }
    TFT_CS_H();
 8001126:	4b05      	ldr	r3, [pc, #20]	@ (800113c <ST7735_DrawString+0xa8>)
 8001128:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001138:	b002      	add	sp, #8
 800113a:	4770      	bx	lr
 800113c:	40020400 	.word	0x40020400
 8001140:	2000001e 	.word	0x2000001e
 8001144:	2000001c 	.word	0x2000001c

08001148 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4606      	mov	r6, r0
 8001152:	4608      	mov	r0, r1
 8001154:	4611      	mov	r1, r2
 8001156:	461a      	mov	r2, r3
 8001158:	4633      	mov	r3, r6
 800115a:	80fb      	strh	r3, [r7, #6]
 800115c:	4603      	mov	r3, r0
 800115e:	80bb      	strh	r3, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	803b      	strh	r3, [r7, #0]
 8001168:	466b      	mov	r3, sp
 800116a:	469a      	mov	sl, r3
    // clipping
    if ((x >= _width) || (y >= _height))
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	4a56      	ldr	r2, [pc, #344]	@ (80012c8 <ST7735_FillRectangle+0x180>)
 8001170:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001174:	4293      	cmp	r3, r2
 8001176:	da05      	bge.n	8001184 <ST7735_FillRectangle+0x3c>
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	4a54      	ldr	r2, [pc, #336]	@ (80012cc <ST7735_FillRectangle+0x184>)
 800117c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001180:	4293      	cmp	r3, r2
 8001182:	db01      	blt.n	8001188 <ST7735_FillRectangle+0x40>
        return;
 8001184:	46d5      	mov	sp, sl
 8001186:	e09b      	b.n	80012c0 <ST7735_FillRectangle+0x178>
    if ((x + w - 1) >= _width)
 8001188:	88fa      	ldrh	r2, [r7, #6]
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	4413      	add	r3, r2
 800118e:	4a4e      	ldr	r2, [pc, #312]	@ (80012c8 <ST7735_FillRectangle+0x180>)
 8001190:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001194:	4293      	cmp	r3, r2
 8001196:	dd06      	ble.n	80011a6 <ST7735_FillRectangle+0x5e>
        w = _width - x;
 8001198:	4b4b      	ldr	r3, [pc, #300]	@ (80012c8 <ST7735_FillRectangle+0x180>)
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= _height)
 80011a6:	88ba      	ldrh	r2, [r7, #4]
 80011a8:	883b      	ldrh	r3, [r7, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a47      	ldr	r2, [pc, #284]	@ (80012cc <ST7735_FillRectangle+0x184>)
 80011ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	dd06      	ble.n	80011c4 <ST7735_FillRectangle+0x7c>
        h = _height - y;
 80011b6:	4b45      	ldr	r3, [pc, #276]	@ (80012cc <ST7735_FillRectangle+0x184>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 80011c4:	4b42      	ldr	r3, [pc, #264]	@ (80012d0 <ST7735_FillRectangle+0x188>)
 80011c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011ca:	619a      	str	r2, [r3, #24]
    ST7735_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	b2d8      	uxtb	r0, r3
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	b2d9      	uxtb	r1, r3
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4413      	add	r3, r2
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b2de      	uxtb	r6, r3
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	883b      	ldrh	r3, [r7, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	3b01      	subs	r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4632      	mov	r2, r6
 80011f6:	f7ff fe27 	bl	8000e48 <ST7735_SetAddressWindow>

    uint8_t data[2] = { color >> 8, color & 0xFF };
 80011fa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	723b      	strb	r3, [r7, #8]
 8001204:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001206:	b2db      	uxtb	r3, r3
 8001208:	727b      	strb	r3, [r7, #9]
    TFT_DC_D();
 800120a:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <ST7735_FillRectangle+0x188>)
 800120c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001210:	619a      	str	r2, [r3, #24]

#ifdef USE_SPI_DMA
    uint8_t tbuf[w*2];
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	005e      	lsls	r6, r3, #1
 8001216:	1e73      	subs	r3, r6, #1
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4632      	mov	r2, r6
 800121c:	2300      	movs	r3, #0
 800121e:	4690      	mov	r8, r2
 8001220:	4699      	mov	r9, r3
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800122e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001236:	4632      	mov	r2, r6
 8001238:	2300      	movs	r3, #0
 800123a:	4614      	mov	r4, r2
 800123c:	461d      	mov	r5, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	00eb      	lsls	r3, r5, #3
 8001248:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800124c:	00e2      	lsls	r2, r4, #3
 800124e:	4633      	mov	r3, r6
 8001250:	3307      	adds	r3, #7
 8001252:	08db      	lsrs	r3, r3, #3
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	ebad 0d03 	sub.w	sp, sp, r3
 800125a:	466b      	mov	r3, sp
 800125c:	3300      	adds	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
    for (y = h; y > 0; y--) {
 8001260:	883b      	ldrh	r3, [r7, #0]
 8001262:	80bb      	strh	r3, [r7, #4]
 8001264:	e024      	b.n	80012b0 <ST7735_FillRectangle+0x168>
        for (int x = w * 2; x >= 0; x -= 2) {
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e00d      	b.n	800128a <ST7735_FillRectangle+0x142>
            tbuf[x] = data[0];
 800126e:	7a39      	ldrb	r1, [r7, #8]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	4413      	add	r3, r2
 8001276:	460a      	mov	r2, r1
 8001278:	701a      	strb	r2, [r3, #0]
            tbuf[x + 1] = data[1];
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	7a79      	ldrb	r1, [r7, #9]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	54d1      	strb	r1, [r2, r3]
        for (int x = w * 2; x >= 0; x -= 2) {
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3b02      	subs	r3, #2
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	daee      	bge.n	800126e <ST7735_FillRectangle+0x126>
        }
        HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, tbuf, sizeof(tbuf));
 8001290:	b2b3      	uxth	r3, r6
 8001292:	461a      	mov	r2, r3
 8001294:	68f9      	ldr	r1, [r7, #12]
 8001296:	480f      	ldr	r0, [pc, #60]	@ (80012d4 <ST7735_FillRectangle+0x18c>)
 8001298:	f003 fab4 	bl	8004804 <HAL_SPI_Transmit_DMA>
        while (hspi1.State == HAL_SPI_STATE_BUSY_TX) {
 800129c:	bf00      	nop
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <ST7735_FillRectangle+0x18c>)
 80012a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d0f9      	beq.n	800129e <ST7735_FillRectangle+0x156>
    for (y = h; y > 0; y--) {
 80012aa:	88bb      	ldrh	r3, [r7, #4]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	80bb      	strh	r3, [r7, #4]
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1d7      	bne.n	8001266 <ST7735_FillRectangle+0x11e>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
        }
    }
#endif

    TFT_CS_H();
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <ST7735_FillRectangle+0x188>)
 80012b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012bc:	619a      	str	r2, [r3, #24]
 80012be:	46d5      	mov	sp, sl
}
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012c8:	2000001e 	.word	0x2000001e
 80012cc:	2000001c 	.word	0x2000001c
 80012d0:	40020400 	.word	0x40020400
 80012d4:	2000004c 	.word	0x2000004c

080012d8 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af02      	add	r7, sp, #8
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <ST7735_FillScreen+0x30>)
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b08      	ldr	r3, [pc, #32]	@ (800130c <ST7735_FillScreen+0x34>)
 80012ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f0:	b299      	uxth	r1, r3
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	460b      	mov	r3, r1
 80012f8:	2100      	movs	r1, #0
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff ff24 	bl	8001148 <ST7735_FillRectangle>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000001e 	.word	0x2000001e
 800130c:	2000001c 	.word	0x2000001c

08001310 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4604      	mov	r4, r0
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4623      	mov	r3, r4
 8001320:	80fb      	strh	r3, [r7, #6]
 8001322:	4603      	mov	r3, r0
 8001324:	80bb      	strh	r3, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	807b      	strh	r3, [r7, #2]
 800132a:	4613      	mov	r3, r2
 800132c:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	4a25      	ldr	r2, [pc, #148]	@ (80013c8 <ST7735_DrawImage+0xb8>)
 8001332:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001336:	4293      	cmp	r3, r2
 8001338:	da3e      	bge.n	80013b8 <ST7735_DrawImage+0xa8>
 800133a:	88bb      	ldrh	r3, [r7, #4]
 800133c:	4a23      	ldr	r2, [pc, #140]	@ (80013cc <ST7735_DrawImage+0xbc>)
 800133e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001342:	4293      	cmp	r3, r2
 8001344:	da38      	bge.n	80013b8 <ST7735_DrawImage+0xa8>
    if((x + w - 1) >= _width) return;
 8001346:	88fa      	ldrh	r2, [r7, #6]
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	4413      	add	r3, r2
 800134c:	4a1e      	ldr	r2, [pc, #120]	@ (80013c8 <ST7735_DrawImage+0xb8>)
 800134e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001352:	4293      	cmp	r3, r2
 8001354:	dc32      	bgt.n	80013bc <ST7735_DrawImage+0xac>
    if((y + h - 1) >= _height) return;
 8001356:	88ba      	ldrh	r2, [r7, #4]
 8001358:	883b      	ldrh	r3, [r7, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a1b      	ldr	r2, [pc, #108]	@ (80013cc <ST7735_DrawImage+0xbc>)
 800135e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001362:	4293      	cmp	r3, r2
 8001364:	dc2c      	bgt.n	80013c0 <ST7735_DrawImage+0xb0>

    TFT_CS_L();
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <ST7735_DrawImage+0xc0>)
 8001368:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136c:	619a      	str	r2, [r3, #24]
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	b2d8      	uxtb	r0, r3
 8001372:	88bb      	ldrh	r3, [r7, #4]
 8001374:	b2d9      	uxtb	r1, r3
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b2db      	uxtb	r3, r3
 8001382:	3b01      	subs	r3, #1
 8001384:	b2dc      	uxtb	r4, r3
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	883b      	ldrh	r3, [r7, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4413      	add	r3, r2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	3b01      	subs	r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4622      	mov	r2, r4
 8001398:	f7ff fd56 	bl	8000e48 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	883a      	ldrh	r2, [r7, #0]
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4619      	mov	r1, r3
 80013a8:	69b8      	ldr	r0, [r7, #24]
 80013aa:	f7ff fce3 	bl	8000d74 <ST7735_WriteData>
    TFT_CS_H();
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <ST7735_DrawImage+0xc0>)
 80013b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013b4:	619a      	str	r2, [r3, #24]
 80013b6:	e004      	b.n	80013c2 <ST7735_DrawImage+0xb2>
    if((x >= _width) || (y >= _height)) return;
 80013b8:	bf00      	nop
 80013ba:	e002      	b.n	80013c2 <ST7735_DrawImage+0xb2>
    if((x + w - 1) >= _width) return;
 80013bc:	bf00      	nop
 80013be:	e000      	b.n	80013c2 <ST7735_DrawImage+0xb2>
    if((y + h - 1) >= _height) return;
 80013c0:	bf00      	nop
}
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	2000001e 	.word	0x2000001e
 80013cc:	2000001c 	.word	0x2000001c
 80013d0:	40020400 	.word	0x40020400

080013d4 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
	TFT_BL_H();
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <ST7735_Backlight_On+0x18>)
 80013da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013de:	619a      	str	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40020400 	.word	0x40020400

080013f0 <ST7735_DrawCircle>:
/***************************************************************************************
** Function name:           drawCircle
** Description:             Draw a circle outline
***************************************************************************************/
void ST7735_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4604      	mov	r4, r0
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4623      	mov	r3, r4
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	4603      	mov	r3, r0
 8001404:	80bb      	strh	r3, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]
 800140a:	4613      	mov	r3, r2
 800140c:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	f1c3 0301 	rsb	r3, r3, #1
 8001414:	b29b      	uxth	r3, r3
 8001416:	81fb      	strh	r3, [r7, #14]
  int16_t ddF_x = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	81bb      	strh	r3, [r7, #12]
  int16_t ddF_y = - r - r;
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	425b      	negs	r3, r3
 8001420:	b29a      	uxth	r2, r3
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b29b      	uxth	r3, r3
 8001428:	817b      	strh	r3, [r7, #10]
  int16_t x = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	813b      	strh	r3, [r7, #8]

  ST7735_DrawPixel(x0 + r, y0  , color);
 800142e:	88fa      	ldrh	r2, [r7, #6]
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	4413      	add	r3, r2
 8001434:	b29b      	uxth	r3, r3
 8001436:	88b9      	ldrh	r1, [r7, #4]
 8001438:	883a      	ldrh	r2, [r7, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fde6 	bl	800100c <ST7735_DrawPixel>
  ST7735_DrawPixel(x0 - r, y0  , color);
 8001440:	88fa      	ldrh	r2, [r7, #6]
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b29b      	uxth	r3, r3
 8001448:	88b9      	ldrh	r1, [r7, #4]
 800144a:	883a      	ldrh	r2, [r7, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fddd 	bl	800100c <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 - r, color);
 8001452:	88f8      	ldrh	r0, [r7, #6]
 8001454:	88ba      	ldrh	r2, [r7, #4]
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	883a      	ldrh	r2, [r7, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fdd4 	bl	800100c <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 + r, color);
 8001464:	88f8      	ldrh	r0, [r7, #6]
 8001466:	88ba      	ldrh	r2, [r7, #4]
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	4413      	add	r3, r2
 800146c:	b29b      	uxth	r3, r3
 800146e:	883a      	ldrh	r2, [r7, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fdcb 	bl	800100c <ST7735_DrawPixel>

  while (x < r)
 8001476:	e081      	b.n	800157c <ST7735_DrawCircle+0x18c>
  {
    if (f >= 0)
 8001478:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0e      	blt.n	800149e <ST7735_DrawCircle+0xae>
    {
      r--;
 8001480:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001484:	b29b      	uxth	r3, r3
 8001486:	3b01      	subs	r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	807b      	strh	r3, [r7, #2]
      ddF_y += 2;
 800148c:	897b      	ldrh	r3, [r7, #10]
 800148e:	3302      	adds	r3, #2
 8001490:	b29b      	uxth	r3, r3
 8001492:	817b      	strh	r3, [r7, #10]
      f += ddF_y;
 8001494:	89fa      	ldrh	r2, [r7, #14]
 8001496:	897b      	ldrh	r3, [r7, #10]
 8001498:	4413      	add	r3, r2
 800149a:	b29b      	uxth	r3, r3
 800149c:	81fb      	strh	r3, [r7, #14]
    }
    x++;
 800149e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	813b      	strh	r3, [r7, #8]
    ddF_x += 2;
 80014aa:	89bb      	ldrh	r3, [r7, #12]
 80014ac:	3302      	adds	r3, #2
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	81bb      	strh	r3, [r7, #12]
    f += ddF_x;
 80014b2:	89fa      	ldrh	r2, [r7, #14]
 80014b4:	89bb      	ldrh	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	81fb      	strh	r3, [r7, #14]

    ST7735_DrawPixel(x0 + x, y0 + r, color);
 80014bc:	88fa      	ldrh	r2, [r7, #6]
 80014be:	893b      	ldrh	r3, [r7, #8]
 80014c0:	4413      	add	r3, r2
 80014c2:	b298      	uxth	r0, r3
 80014c4:	88ba      	ldrh	r2, [r7, #4]
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	4413      	add	r3, r2
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	883a      	ldrh	r2, [r7, #0]
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fd9c 	bl	800100c <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 + r, color);
 80014d4:	88fa      	ldrh	r2, [r7, #6]
 80014d6:	893b      	ldrh	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	b298      	uxth	r0, r3
 80014dc:	88ba      	ldrh	r2, [r7, #4]
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	4413      	add	r3, r2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	883a      	ldrh	r2, [r7, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fd90 	bl	800100c <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 - r, color);
 80014ec:	88fa      	ldrh	r2, [r7, #6]
 80014ee:	893b      	ldrh	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	b298      	uxth	r0, r3
 80014f4:	88ba      	ldrh	r2, [r7, #4]
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	883a      	ldrh	r2, [r7, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fd84 	bl	800100c <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + x, y0 - r, color);
 8001504:	88fa      	ldrh	r2, [r7, #6]
 8001506:	893b      	ldrh	r3, [r7, #8]
 8001508:	4413      	add	r3, r2
 800150a:	b298      	uxth	r0, r3
 800150c:	88ba      	ldrh	r2, [r7, #4]
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	883a      	ldrh	r2, [r7, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fd78 	bl	800100c <ST7735_DrawPixel>

    ST7735_DrawPixel(x0 + r, y0 + x, color);
 800151c:	88fa      	ldrh	r2, [r7, #6]
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	4413      	add	r3, r2
 8001522:	b298      	uxth	r0, r3
 8001524:	88ba      	ldrh	r2, [r7, #4]
 8001526:	893b      	ldrh	r3, [r7, #8]
 8001528:	4413      	add	r3, r2
 800152a:	b29b      	uxth	r3, r3
 800152c:	883a      	ldrh	r2, [r7, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff fd6c 	bl	800100c <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 + x, color);
 8001534:	88fa      	ldrh	r2, [r7, #6]
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	b298      	uxth	r0, r3
 800153c:	88ba      	ldrh	r2, [r7, #4]
 800153e:	893b      	ldrh	r3, [r7, #8]
 8001540:	4413      	add	r3, r2
 8001542:	b29b      	uxth	r3, r3
 8001544:	883a      	ldrh	r2, [r7, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fd60 	bl	800100c <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 - x, color);
 800154c:	88fa      	ldrh	r2, [r7, #6]
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	b298      	uxth	r0, r3
 8001554:	88ba      	ldrh	r2, [r7, #4]
 8001556:	893b      	ldrh	r3, [r7, #8]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	b29b      	uxth	r3, r3
 800155c:	883a      	ldrh	r2, [r7, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fd54 	bl	800100c <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + r, y0 - x, color);
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	4413      	add	r3, r2
 800156a:	b298      	uxth	r0, r3
 800156c:	88ba      	ldrh	r2, [r7, #4]
 800156e:	893b      	ldrh	r3, [r7, #8]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	883a      	ldrh	r2, [r7, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fd48 	bl	800100c <ST7735_DrawPixel>
  while (x < r)
 800157c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001580:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001584:	429a      	cmp	r2, r3
 8001586:	f6ff af77 	blt.w	8001478 <ST7735_DrawCircle+0x88>
  }
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}

08001594 <ST7735_FillTriangle>:
** Function name:           fillTriangle
** Description:             Draw a filled triangle using 3 arbitrary points
***************************************************************************************/
// Fill a triangle - original Adafruit function works well and code footprint is small
void ST7735_FillTriangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b08d      	sub	sp, #52	@ 0x34
 8001598:	af00      	add	r7, sp, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	80fb      	strh	r3, [r7, #6]
 80015a6:	4603      	mov	r3, r0
 80015a8:	80bb      	strh	r3, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	807b      	strh	r3, [r7, #2]
 80015ae:	4613      	mov	r3, r2
 80015b0:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1)
 80015b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dd0b      	ble.n	80015d6 <ST7735_FillTriangle+0x42>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 80015be:	88bb      	ldrh	r3, [r7, #4]
 80015c0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80015c2:	883b      	ldrh	r3, [r7, #0]
 80015c4:	80bb      	strh	r3, [r7, #4]
 80015c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80015c8:	803b      	strh	r3, [r7, #0]
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	843b      	strh	r3, [r7, #32]
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	80fb      	strh	r3, [r7, #6]
 80015d2:	8c3b      	ldrh	r3, [r7, #32]
 80015d4:	807b      	strh	r3, [r7, #2]
  }

  if (y1 > y2)
 80015d6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80015da:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80015de:	429a      	cmp	r2, r3
 80015e0:	dd0f      	ble.n	8001602 <ST7735_FillTriangle+0x6e>
  {
	  SWAP_INT16_T(y2, y1); SWAP_INT16_T(x2, x1);
 80015e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80015e6:	83fb      	strh	r3, [r7, #30]
 80015e8:	883b      	ldrh	r3, [r7, #0]
 80015ea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80015ee:	8bfb      	ldrh	r3, [r7, #30]
 80015f0:	803b      	strh	r3, [r7, #0]
 80015f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80015f6:	83bb      	strh	r3, [r7, #28]
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80015fe:	8bbb      	ldrh	r3, [r7, #28]
 8001600:	807b      	strh	r3, [r7, #2]
  }

  if (y0 > y1)
 8001602:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001606:	f9b7 3000 	ldrsh.w	r3, [r7]
 800160a:	429a      	cmp	r2, r3
 800160c:	dd0b      	ble.n	8001626 <ST7735_FillTriangle+0x92>
  {
	  SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	837b      	strh	r3, [r7, #26]
 8001612:	883b      	ldrh	r3, [r7, #0]
 8001614:	80bb      	strh	r3, [r7, #4]
 8001616:	8b7b      	ldrh	r3, [r7, #26]
 8001618:	803b      	strh	r3, [r7, #0]
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	833b      	strh	r3, [r7, #24]
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	80fb      	strh	r3, [r7, #6]
 8001622:	8b3b      	ldrh	r3, [r7, #24]
 8001624:	807b      	strh	r3, [r7, #2]
  }

  if (y0 == y2)
 8001626:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800162a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800162e:	429a      	cmp	r2, r3
 8001630:	d137      	bne.n	80016a2 <ST7735_FillTriangle+0x10e>
  { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001636:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001638:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if (x1 < a)      a = x1;
 800163a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800163e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001642:	429a      	cmp	r2, r3
 8001644:	da02      	bge.n	800164c <ST7735_FillTriangle+0xb8>
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800164a:	e007      	b.n	800165c <ST7735_FillTriangle+0xc8>
    else if (x1 > b) b = x1;
 800164c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001650:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001654:	429a      	cmp	r2, r3
 8001656:	dd01      	ble.n	800165c <ST7735_FillTriangle+0xc8>
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (x2 < a)      a = x2;
 800165c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8001660:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001664:	429a      	cmp	r2, r3
 8001666:	da03      	bge.n	8001670 <ST7735_FillTriangle+0xdc>
 8001668:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800166c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800166e:	e008      	b.n	8001682 <ST7735_FillTriangle+0xee>
    else if (x2 > b) b = x2;
 8001670:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8001674:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001678:	429a      	cmp	r2, r3
 800167a:	dd02      	ble.n	8001682 <ST7735_FillTriangle+0xee>
 800167c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001680:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    ST7735_DrawFastHLine(a, y0, b - a + 1, color);
 8001682:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001684:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	b29b      	uxth	r3, r3
 800168a:	3301      	adds	r3, #1
 800168c:	b29b      	uxth	r3, r3
 800168e:	b21a      	sxth	r2, r3
 8001690:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001694:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001698:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800169c:	f000 f9c0 	bl	8001a20 <ST7735_DrawFastHLine>
    return;
 80016a0:	e0da      	b.n	8001858 <ST7735_FillTriangle+0x2c4>
  }

  int16_t
  dx01 = x1 - x0,
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	82fb      	strh	r3, [r7, #22]
  dy01 = y1 - y0,
 80016ac:	883a      	ldrh	r2, [r7, #0]
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	82bb      	strh	r3, [r7, #20]
  dx02 = x2 - x0,
 80016b6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	827b      	strh	r3, [r7, #18]
  dy02 = y2 - y0,
 80016c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80016c6:	88bb      	ldrh	r3, [r7, #4]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	823b      	strh	r3, [r7, #16]
  dx12 = x2 - x1,
 80016ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	81fb      	strh	r3, [r7, #14]
  dy12 = y2 - y1,
 80016da:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80016de:	883b      	ldrh	r3, [r7, #0]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 80016e6:	2300      	movs	r3, #0
 80016e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  sb   = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if (y1 == y2) last = y1;  // Include y1 scanline
 80016ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 80016f2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d102      	bne.n	8001700 <ST7735_FillTriangle+0x16c>
 80016fa:	883b      	ldrh	r3, [r7, #0]
 80016fc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80016fe:	e003      	b.n	8001708 <ST7735_FillTriangle+0x174>
  else         last = y1 - 1; // Skip it
 8001700:	883b      	ldrh	r3, [r7, #0]
 8001702:	3b01      	subs	r3, #1
 8001704:	b29b      	uxth	r3, r3
 8001706:	853b      	strh	r3, [r7, #40]	@ 0x28

  for (y = y0; y <= last; y++)
 8001708:	88bb      	ldrh	r3, [r7, #4]
 800170a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800170c:	e040      	b.n	8001790 <ST7735_FillTriangle+0x1fc>
  {
    a   = x0 + sa / dy01;
 800170e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8001712:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001716:	fb92 f3f3 	sdiv	r3, r2, r3
 800171a:	b29a      	uxth	r2, r3
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4413      	add	r3, r2
 8001720:	b29b      	uxth	r3, r3
 8001722:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    b   = x0 + sb / dy02;
 8001724:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001728:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800172c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001730:	b29a      	uxth	r2, r3
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4413      	add	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    sa += dx01;
 800173a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800173c:	8afb      	ldrh	r3, [r7, #22]
 800173e:	4413      	add	r3, r2
 8001740:	b29b      	uxth	r3, r3
 8001742:	84fb      	strh	r3, [r7, #38]	@ 0x26
    sb += dx02;
 8001744:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001746:	8a7b      	ldrh	r3, [r7, #18]
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (a > b) SWAP_INT16_T(a, b);
 800174e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8001752:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001756:	429a      	cmp	r2, r3
 8001758:	dd05      	ble.n	8001766 <ST7735_FillTriangle+0x1d2>
 800175a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800175c:	813b      	strh	r3, [r7, #8]
 800175e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001760:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001762:	893b      	ldrh	r3, [r7, #8]
 8001764:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 8001766:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001768:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b29b      	uxth	r3, r3
 800176e:	3301      	adds	r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	b21a      	sxth	r2, r3
 8001774:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001778:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 800177c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8001780:	f000 f94e 	bl	8001a20 <ST7735_DrawFastHLine>
  for (y = y0; y <= last; y++)
 8001784:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	3301      	adds	r3, #1
 800178c:	b29b      	uxth	r3, r3
 800178e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001790:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001794:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001798:	429a      	cmp	r2, r3
 800179a:	ddb8      	ble.n	800170e <ST7735_FillTriangle+0x17a>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 800179c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80017a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	89fb      	ldrh	r3, [r7, #14]
 80017aa:	fb12 f303 	smulbb	r3, r2, r3
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  sb = dx02 * (y - y0);
 80017b2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80017b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b29a      	uxth	r2, r3
 80017be:	8a7b      	ldrh	r3, [r7, #18]
 80017c0:	fb12 f303 	smulbb	r3, r2, r3
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (; y <= y2; y++)
 80017c8:	e040      	b.n	800184c <ST7735_FillTriangle+0x2b8>
  {
    a   = x1 + sa / dy12;
 80017ca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80017ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	4413      	add	r3, r2
 80017dc:	b29b      	uxth	r3, r3
 80017de:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    b   = x0 + sb / dy02;
 80017e0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80017e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	4413      	add	r3, r2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    sa += dx12;
 80017f6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	4413      	add	r3, r2
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
    sb += dx02;
 8001800:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001802:	8a7b      	ldrh	r3, [r7, #18]
 8001804:	4413      	add	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if (a > b) SWAP_INT16_T(a, b);
 800180a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 800180e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001812:	429a      	cmp	r2, r3
 8001814:	dd05      	ble.n	8001822 <ST7735_FillTriangle+0x28e>
 8001816:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001818:	817b      	strh	r3, [r7, #10]
 800181a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800181c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800181e:	897b      	ldrh	r3, [r7, #10]
 8001820:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 8001822:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001824:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	b29b      	uxth	r3, r3
 800182a:	3301      	adds	r3, #1
 800182c:	b29b      	uxth	r3, r3
 800182e:	b21a      	sxth	r2, r3
 8001830:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001834:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 8001838:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800183c:	f000 f8f0 	bl	8001a20 <ST7735_DrawFastHLine>
  for (; y <= y2; y++)
 8001840:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001844:	b29b      	uxth	r3, r3
 8001846:	3301      	adds	r3, #1
 8001848:	b29b      	uxth	r3, r3
 800184a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800184c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001850:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001854:	429a      	cmp	r2, r3
 8001856:	ddb8      	ble.n	80017ca <ST7735_FillTriangle+0x236>
  }
}
 8001858:	3734      	adds	r7, #52	@ 0x34
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}

0800185e <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800185e:	b590      	push	{r4, r7, lr}
 8001860:	b089      	sub	sp, #36	@ 0x24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4604      	mov	r4, r0
 8001866:	4608      	mov	r0, r1
 8001868:	4611      	mov	r1, r2
 800186a:	461a      	mov	r2, r3
 800186c:	4623      	mov	r3, r4
 800186e:	80fb      	strh	r3, [r7, #6]
 8001870:	4603      	mov	r3, r0
 8001872:	80bb      	strh	r3, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
 8001878:	4613      	mov	r3, r2
 800187a:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800187c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001880:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800188a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800188e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001896:	1acb      	subs	r3, r1, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	bfb8      	it	lt
 800189c:	425b      	neglt	r3, r3
 800189e:	429a      	cmp	r2, r3
 80018a0:	bfcc      	ite	gt
 80018a2:	2301      	movgt	r3, #1
 80018a4:	2300      	movle	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	837b      	strh	r3, [r7, #26]
	if (steep)
 80018aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <ST7735_DrawLine+0x6c>
	{
		SWAP_INT16_T(x0, y0);
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	833b      	strh	r3, [r7, #24]
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	80fb      	strh	r3, [r7, #6]
 80018ba:	8b3b      	ldrh	r3, [r7, #24]
 80018bc:	80bb      	strh	r3, [r7, #4]
		SWAP_INT16_T(x1, y1);
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	82fb      	strh	r3, [r7, #22]
 80018c2:	883b      	ldrh	r3, [r7, #0]
 80018c4:	807b      	strh	r3, [r7, #2]
 80018c6:	8afb      	ldrh	r3, [r7, #22]
 80018c8:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1)
 80018ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dd0b      	ble.n	80018ee <ST7735_DrawLine+0x90>
	{
		SWAP_INT16_T(x0, x1);
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	82bb      	strh	r3, [r7, #20]
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	80fb      	strh	r3, [r7, #6]
 80018de:	8abb      	ldrh	r3, [r7, #20]
 80018e0:	807b      	strh	r3, [r7, #2]
		SWAP_INT16_T(y0, y1);
 80018e2:	88bb      	ldrh	r3, [r7, #4]
 80018e4:	827b      	strh	r3, [r7, #18]
 80018e6:	883b      	ldrh	r3, [r7, #0]
 80018e8:	80bb      	strh	r3, [r7, #4]
 80018ea:	8a7b      	ldrh	r3, [r7, #18]
 80018ec:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 80018f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80018fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	bfb8      	it	lt
 8001906:	425b      	neglt	r3, r3
 8001908:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 800190a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800190e:	0fda      	lsrs	r2, r3, #31
 8001910:	4413      	add	r3, r2
 8001912:	105b      	asrs	r3, r3, #1
 8001914:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 8001916:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800191a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800191e:	429a      	cmp	r2, r3
 8001920:	da02      	bge.n	8001928 <ST7735_DrawLine+0xca>
	{
		ystep = 1;
 8001922:	2301      	movs	r3, #1
 8001924:	83bb      	strh	r3, [r7, #28]
 8001926:	e02d      	b.n	8001984 <ST7735_DrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8001928:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800192c:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0<=x1; x0++)
 800192e:	e029      	b.n	8001984 <ST7735_DrawLine+0x126>
	{
		if (steep)
 8001930:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <ST7735_DrawLine+0xe8>
		{
			ST7735_DrawPixel(y0, x0, color);
 8001938:	88bb      	ldrh	r3, [r7, #4]
 800193a:	88f9      	ldrh	r1, [r7, #6]
 800193c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fb64 	bl	800100c <ST7735_DrawPixel>
 8001944:	e005      	b.n	8001952 <ST7735_DrawLine+0xf4>
		}
		else
		{
			ST7735_DrawPixel(x0, y0, color);
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	88b9      	ldrh	r1, [r7, #4]
 800194a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fb5d 	bl	800100c <ST7735_DrawPixel>
		}
		err -= dy;
 8001952:	8bfa      	ldrh	r2, [r7, #30]
 8001954:	89fb      	ldrh	r3, [r7, #14]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	b29b      	uxth	r3, r3
 800195a:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 800195c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001960:	2b00      	cmp	r3, #0
 8001962:	da09      	bge.n	8001978 <ST7735_DrawLine+0x11a>
		{
			y0 += ystep;
 8001964:	88ba      	ldrh	r2, [r7, #4]
 8001966:	8bbb      	ldrh	r3, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	b29b      	uxth	r3, r3
 800196c:	80bb      	strh	r3, [r7, #4]
			err += dx;
 800196e:	8bfa      	ldrh	r2, [r7, #30]
 8001970:	8a3b      	ldrh	r3, [r7, #16]
 8001972:	4413      	add	r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	83fb      	strh	r3, [r7, #30]
	for (; x0<=x1; x0++)
 8001978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197c:	b29b      	uxth	r3, r3
 800197e:	3301      	adds	r3, #1
 8001980:	b29b      	uxth	r3, r3
 8001982:	80fb      	strh	r3, [r7, #6]
 8001984:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001988:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800198c:	429a      	cmp	r2, r3
 800198e:	ddcf      	ble.n	8001930 <ST7735_DrawLine+0xd2>
		}
	}
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3724      	adds	r7, #36	@ 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}
	...

0800199c <ST7735_DrawFastVLine>:
/***************************************************************************************
** Function name:           drawFastVLine
** Description:             draw a vertical line
***************************************************************************************/
void ST7735_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	80fb      	strh	r3, [r7, #6]
 80019ae:	4603      	mov	r3, r0
 80019b0:	80bb      	strh	r3, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	807b      	strh	r3, [r7, #2]
 80019b6:	4613      	mov	r3, r2
 80019b8:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <ST7735_DrawFastVLine+0x7c>)
 80019bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	da22      	bge.n	8001a0e <ST7735_DrawFastVLine+0x72>
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <ST7735_DrawFastVLine+0x80>)
 80019ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	da1b      	bge.n	8001a0e <ST7735_DrawFastVLine+0x72>
  if ((y + h - 1) >= _height) h = _height - y;
 80019d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019de:	4413      	add	r3, r2
 80019e0:	4a0e      	ldr	r2, [pc, #56]	@ (8001a1c <ST7735_DrawFastVLine+0x80>)
 80019e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	dd07      	ble.n	80019fa <ST7735_DrawFastVLine+0x5e>
 80019ea:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <ST7735_DrawFastVLine+0x80>)
 80019ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	807b      	strh	r3, [r7, #2]

  #ifdef USE_SPI_DMA
  ST7735_FillRectangle(x, y, 1, h, color);
 80019fa:	88f8      	ldrh	r0, [r7, #6]
 80019fc:	88b9      	ldrh	r1, [r7, #4]
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	883b      	ldrh	r3, [r7, #0]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4613      	mov	r3, r2
 8001a06:	2201      	movs	r2, #1
 8001a08:	f7ff fb9e 	bl	8001148 <ST7735_FillRectangle>
 8001a0c:	e000      	b.n	8001a10 <ST7735_DrawFastVLine+0x74>
  if ((x >= _width) || (y >= _height)) return;
 8001a0e:	bf00      	nop
  #else
  ST7735_DrawLine(x, y, x, y + h - 1, color);
  #endif

}
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000001e 	.word	0x2000001e
 8001a1c:	2000001c 	.word	0x2000001c

08001a20 <ST7735_DrawFastHLine>:
/***************************************************************************************
** Function name:           drawFastHLine
** Description:             draw a horizontal line
***************************************************************************************/
void ST7735_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	4604      	mov	r4, r0
 8001a28:	4608      	mov	r0, r1
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4623      	mov	r3, r4
 8001a30:	80fb      	strh	r3, [r7, #6]
 8001a32:	4603      	mov	r3, r0
 8001a34:	80bb      	strh	r3, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	807b      	strh	r3, [r7, #2]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <ST7735_DrawFastHLine+0x78>)
 8001a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	da21      	bge.n	8001a90 <ST7735_DrawFastHLine+0x70>
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <ST7735_DrawFastHLine+0x7c>)
 8001a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a52:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	da1a      	bge.n	8001a90 <ST7735_DrawFastHLine+0x70>
  if ((x + w - 1) >= _width)  w = _width - x;
 8001a5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a0c      	ldr	r2, [pc, #48]	@ (8001a98 <ST7735_DrawFastHLine+0x78>)
 8001a66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	dd07      	ble.n	8001a7e <ST7735_DrawFastHLine+0x5e>
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <ST7735_DrawFastHLine+0x78>)
 8001a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	807b      	strh	r3, [r7, #2]

  #ifdef USE_SPI_DMA
  ST7735_FillRectangle(x, y, w, 1, color);
 8001a7e:	88f8      	ldrh	r0, [r7, #6]
 8001a80:	88b9      	ldrh	r1, [r7, #4]
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	883b      	ldrh	r3, [r7, #0]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f7ff fb5d 	bl	8001148 <ST7735_FillRectangle>
 8001a8e:	e000      	b.n	8001a92 <ST7735_DrawFastHLine+0x72>
  if ((x >= _width) || (y >= _height)) return;
 8001a90:	bf00      	nop
  #else
  ST7735_DrawLine(x, y, x + w - 1, y, color);
  #endif
}
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd90      	pop	{r4, r7, pc}
 8001a98:	2000001e 	.word	0x2000001e
 8001a9c:	2000001c 	.word	0x2000001c

08001aa0 <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b48      	ldr	r3, [pc, #288]	@ (8001bd4 <ST7735_SetRotation+0x134>)
 8001ab4:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 8001ab6:	4b48      	ldr	r3, [pc, #288]	@ (8001bd8 <ST7735_SetRotation+0x138>)
 8001ab8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001abc:	619a      	str	r2, [r3, #24]

  ST7735_WriteCommand(ST7735_MADCTL);
 8001abe:	2036      	movs	r0, #54	@ 0x36
 8001ac0:	f7ff f940 	bl	8000d44 <ST7735_WriteCommand>

  switch (_value_rotation)
 8001ac4:	4b43      	ldr	r3, [pc, #268]	@ (8001bd4 <ST7735_SetRotation+0x134>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d87b      	bhi.n	8001bc4 <ST7735_SetRotation+0x124>
 8001acc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad4 <ST7735_SetRotation+0x34>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001b21 	.word	0x08001b21
 8001adc:	08001b5d 	.word	0x08001b5d
 8001ae0:	08001b89 	.word	0x08001b89
  {
    case 0:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 8001ae4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bdc <ST7735_SetRotation+0x13c>)
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bdc <ST7735_SetRotation+0x13c>)
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <ST7735_SetRotation+0x13c>)
 8001af2:	78db      	ldrb	r3, [r3, #3]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	73fb      	strb	r3, [r7, #15]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001afa:	f107 030f 	add.w	r3, r7, #15
 8001afe:	2101      	movs	r1, #1
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f937 	bl	8000d74 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 8001b06:	4b36      	ldr	r3, [pc, #216]	@ (8001be0 <ST7735_SetRotation+0x140>)
 8001b08:	2280      	movs	r2, #128	@ 0x80
 8001b0a:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 8001b0c:	4b35      	ldr	r3, [pc, #212]	@ (8001be4 <ST7735_SetRotation+0x144>)
 8001b0e:	22a0      	movs	r2, #160	@ 0xa0
 8001b10:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 8001b12:	4b35      	ldr	r3, [pc, #212]	@ (8001be8 <ST7735_SetRotation+0x148>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
		_ystart = ST7735_YSTART;
 8001b18:	4b34      	ldr	r3, [pc, #208]	@ (8001bec <ST7735_SetRotation+0x14c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
    }
     break;
 8001b1e:	e051      	b.n	8001bc4 <ST7735_SetRotation+0x124>
    case 1:
    {
    	uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 8001b20:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <ST7735_SetRotation+0x13c>)
 8001b22:	785a      	ldrb	r2, [r3, #1]
 8001b24:	4b2d      	ldr	r3, [pc, #180]	@ (8001bdc <ST7735_SetRotation+0x13c>)
 8001b26:	789b      	ldrb	r3, [r3, #2]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <ST7735_SetRotation+0x13c>)
 8001b2e:	78db      	ldrb	r3, [r3, #3]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	73bb      	strb	r3, [r7, #14]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001b36:	f107 030e 	add.w	r3, r7, #14
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f919 	bl	8000d74 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8001b42:	4b27      	ldr	r3, [pc, #156]	@ (8001be0 <ST7735_SetRotation+0x140>)
 8001b44:	22a0      	movs	r2, #160	@ 0xa0
 8001b46:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001b48:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <ST7735_SetRotation+0x144>)
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8001b4e:	4b26      	ldr	r3, [pc, #152]	@ (8001be8 <ST7735_SetRotation+0x148>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8001b54:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <ST7735_SetRotation+0x14c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001b5a:	e033      	b.n	8001bc4 <ST7735_SetRotation+0x124>
    case 2:
    {
    	uint8_t d_r = _data_rotation[3];
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <ST7735_SetRotation+0x13c>)
 8001b5e:	78db      	ldrb	r3, [r3, #3]
 8001b60:	737b      	strb	r3, [r7, #13]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001b62:	f107 030d 	add.w	r3, r7, #13
 8001b66:	2101      	movs	r1, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f903 	bl	8000d74 <ST7735_WriteData>
    	_width  = ST7735_WIDTH;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <ST7735_SetRotation+0x140>)
 8001b70:	2280      	movs	r2, #128	@ 0x80
 8001b72:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_HEIGHT;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <ST7735_SetRotation+0x144>)
 8001b76:	22a0      	movs	r2, #160	@ 0xa0
 8001b78:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_XSTART;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <ST7735_SetRotation+0x148>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_YSTART;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <ST7735_SetRotation+0x14c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001b86:	e01d      	b.n	8001bc4 <ST7735_SetRotation+0x124>
    case 3:
    {
    	uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <ST7735_SetRotation+0x13c>)
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <ST7735_SetRotation+0x13c>)
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <ST7735_SetRotation+0x13c>)
 8001b96:	78db      	ldrb	r3, [r3, #3]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	733b      	strb	r3, [r7, #12]
    	ST7735_WriteData(&d_r, sizeof(d_r));
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f8e5 	bl	8000d74 <ST7735_WriteData>
    	_width  = ST7735_HEIGHT;
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <ST7735_SetRotation+0x140>)
 8001bac:	22a0      	movs	r2, #160	@ 0xa0
 8001bae:	801a      	strh	r2, [r3, #0]
    	_height = ST7735_WIDTH;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <ST7735_SetRotation+0x144>)
 8001bb2:	2280      	movs	r2, #128	@ 0x80
 8001bb4:	801a      	strh	r2, [r3, #0]
    	_xstart = ST7735_YSTART;
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <ST7735_SetRotation+0x148>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
    	_ystart = ST7735_XSTART;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <ST7735_SetRotation+0x14c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
    }
      break;
 8001bc2:	bf00      	nop
  }
  TFT_CS_H();
 8001bc4:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <ST7735_SetRotation+0x138>)
 8001bc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bca:	619a      	str	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000194 	.word	0x20000194
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	20000018 	.word	0x20000018
 8001be0:	2000001e 	.word	0x2000001e
 8001be4:	2000001c 	.word	0x2000001c
 8001be8:	20000195 	.word	0x20000195
 8001bec:	20000196 	.word	0x20000196

08001bf0 <ST7735_GetHeight>:
{
  return _value_rotation;
}

int16_t ST7735_GetHeight(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
	return _height;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <ST7735_GetHeight+0x14>)
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	2000001c 	.word	0x2000001c

08001c08 <ST7735_GetWidth>:

int16_t ST7735_GetWidth(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
	return _width;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <ST7735_GetWidth+0x14>)
 8001c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	2000001e 	.word	0x2000001e

08001c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001c5e:	2005      	movs	r0, #5
 8001c60:	f000 fad6 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a30      	ldr	r2, [pc, #192]	@ (8001d50 <HAL_SPI_MspInit+0xe0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d159      	bne.n	8001d46 <HAL_SPI_MspInit+0xd6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b2f      	ldr	r3, [pc, #188]	@ (8001d54 <HAL_SPI_MspInit+0xe4>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8001d54 <HAL_SPI_MspInit+0xe4>)
 8001c9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d54 <HAL_SPI_MspInit+0xe4>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b28      	ldr	r3, [pc, #160]	@ (8001d54 <HAL_SPI_MspInit+0xe4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a27      	ldr	r2, [pc, #156]	@ (8001d54 <HAL_SPI_MspInit+0xe4>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <HAL_SPI_MspInit+0xe4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8001cca:	2328      	movs	r3, #40	@ 0x28
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cda:	2305      	movs	r3, #5
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	481c      	ldr	r0, [pc, #112]	@ (8001d58 <HAL_SPI_MspInit+0xe8>)
 8001ce6:	f000 ffed 	bl	8002cc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001cec:	4a1c      	ldr	r2, [pc, #112]	@ (8001d60 <HAL_SPI_MspInit+0xf0>)
 8001cee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001cf2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001cf6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001cfa:	2240      	movs	r2, #64	@ 0x40
 8001cfc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d04:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d0a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d18:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d24:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d2a:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001d2c:	f000 fae0 	bl	80022f0 <HAL_DMA_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001d36:	f7fe ffd9 	bl	8000cec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001d3e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d40:	4a06      	ldr	r2, [pc, #24]	@ (8001d5c <HAL_SPI_MspInit+0xec>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	@ 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40013000 	.word	0x40013000
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	200000a4 	.word	0x200000a4
 8001d60:	40026458 	.word	0x40026458

08001d64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0e      	ldr	r2, [pc, #56]	@ (8001dac <HAL_TIM_Base_MspInit+0x48>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d115      	bne.n	8001da2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <HAL_TIM_Base_MspInit+0x4c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001db0 <HAL_TIM_Base_MspInit+0x4c>)
 8001d80:	f043 0310 	orr.w	r3, r3, #16
 8001d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d86:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_TIM_Base_MspInit+0x4c>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	2036      	movs	r0, #54	@ 0x36
 8001d98:	f000 fa5a 	bl	8002250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d9c:	2036      	movs	r0, #54	@ 0x36
 8001d9e:	f000 fa83 	bl	80022a8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40001000 	.word	0x40001000
 8001db0:	40023800 	.word	0x40023800

08001db4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a19      	ldr	r2, [pc, #100]	@ (8001e38 <HAL_UART_MspInit+0x84>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d12b      	bne.n	8001e2e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	4a17      	ldr	r2, [pc, #92]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_UART_MspInit+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e0e:	230c      	movs	r3, #12
 8001e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <HAL_UART_MspInit+0x8c>)
 8001e2a:	f000 ff4b 	bl	8002cc4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	@ 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40004400 	.word	0x40004400
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <NMI_Handler+0x4>

08001e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9a:	f000 f8a5 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <TIM6_DAC_IRQHandler+0x10>)
 8001eaa:	f003 f809 	bl	8004ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000104 	.word	0x20000104

08001eb8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <DMA2_Stream3_IRQHandler+0x10>)
 8001ebe:	f000 fc97 	bl	80027f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200000a4 	.word	0x200000a4

08001ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <SystemInit+0x20>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed6:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <SystemInit+0x20>)
 8001ed8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001edc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ef0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ef4:	f7ff ffea 	bl	8001ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef8:	480c      	ldr	r0, [pc, #48]	@ (8001f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001efa:	490d      	ldr	r1, [pc, #52]	@ (8001f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001efc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f10:	4c0a      	ldr	r4, [pc, #40]	@ (8001f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f003 fe29 	bl	8005b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f22:	f7fe fd21 	bl	8000968 <main>
  bx  lr    
 8001f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f30:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001f34:	08010738 	.word	0x08010738
  ldr r2, =_sbss
 8001f38:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001f3c:	2000019c 	.word	0x2000019c

08001f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC_IRQHandler>
	...

08001f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f84 <HAL_Init+0x40>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <HAL_Init+0x40>)
 8001f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f60:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a07      	ldr	r2, [pc, #28]	@ (8001f84 <HAL_Init+0x40>)
 8001f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f000 f94f 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f000 f808 	bl	8001f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f78:	f7ff fe52 	bl	8001c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023c00 	.word	0x40023c00

08001f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_InitTick+0x54>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_InitTick+0x58>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f996 	bl	80022d8 <HAL_SYSTICK_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00e      	b.n	8001fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d80a      	bhi.n	8001fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fc4:	f000 f944 	bl	8002250 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc8:	4a06      	ldr	r2, [pc, #24]	@ (8001fe4 <HAL_InitTick+0x5c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000020 	.word	0x20000020
 8001fe0:	20000028 	.word	0x20000028
 8001fe4:	20000024 	.word	0x20000024

08001fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_IncTick+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_IncTick+0x24>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	@ (800200c <HAL_IncTick+0x24>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000028 	.word	0x20000028
 800200c:	20000198 	.word	0x20000198

08002010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000198 	.word	0x20000198

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff ffee 	bl	8002010 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <HAL_Delay+0x44>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffde 	bl	8002010 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000028 	.word	0x20000028

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	@ (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	@ (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	@ (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	@ 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021dc:	d301      	bcc.n	80021e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021de:	2301      	movs	r3, #1
 80021e0:	e00f      	b.n	8002202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e2:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <SysTick_Config+0x40>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ea:	210f      	movs	r1, #15
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021f0:	f7ff ff8e 	bl	8002110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f4:	4b05      	ldr	r3, [pc, #20]	@ (800220c <SysTick_Config+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	4b04      	ldr	r3, [pc, #16]	@ (800220c <SysTick_Config+0x40>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	e000e010 	.word	0xe000e010

08002210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b07      	cmp	r3, #7
 800221c:	d00f      	beq.n	800223e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b06      	cmp	r3, #6
 8002222:	d00c      	beq.n	800223e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b05      	cmp	r3, #5
 8002228:	d009      	beq.n	800223e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d006      	beq.n	800223e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d003      	beq.n	800223e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002236:	2190      	movs	r1, #144	@ 0x90
 8002238:	4804      	ldr	r0, [pc, #16]	@ (800224c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800223a:	f7fe fd5e 	bl	8000cfa <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff16 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	08005c70 	.word	0x08005c70

08002250 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b0f      	cmp	r3, #15
 8002266:	d903      	bls.n	8002270 <HAL_NVIC_SetPriority+0x20>
 8002268:	21a8      	movs	r1, #168	@ 0xa8
 800226a:	480e      	ldr	r0, [pc, #56]	@ (80022a4 <HAL_NVIC_SetPriority+0x54>)
 800226c:	f7fe fd45 	bl	8000cfa <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b0f      	cmp	r3, #15
 8002274:	d903      	bls.n	800227e <HAL_NVIC_SetPriority+0x2e>
 8002276:	21a9      	movs	r1, #169	@ 0xa9
 8002278:	480a      	ldr	r0, [pc, #40]	@ (80022a4 <HAL_NVIC_SetPriority+0x54>)
 800227a:	f7fe fd3e 	bl	8000cfa <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800227e:	f7ff ff1b 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 8002282:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	6978      	ldr	r0, [r7, #20]
 800228a:	f7ff ff6b 	bl	8002164 <NVIC_EncodePriority>
 800228e:	4602      	mov	r2, r0
 8002290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff3a 	bl	8002110 <__NVIC_SetPriority>
}
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	08005c70 	.word	0x08005c70

080022a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da03      	bge.n	80022c2 <HAL_NVIC_EnableIRQ+0x1a>
 80022ba:	21bc      	movs	r1, #188	@ 0xbc
 80022bc:	4805      	ldr	r0, [pc, #20]	@ (80022d4 <HAL_NVIC_EnableIRQ+0x2c>)
 80022be:	f7fe fd1c 	bl	8000cfa <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff04 	bl	80020d4 <__NVIC_EnableIRQ>
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	08005c70 	.word	0x08005c70

080022d8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff73 	bl	80021cc <SysTick_Config>
 80022e6:	4603      	mov	r3, r0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff fe88 	bl	8002010 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e203      	b.n	8002714 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a8b      	ldr	r2, [pc, #556]	@ (8002540 <HAL_DMA_Init+0x250>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d04e      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a8a      	ldr	r2, [pc, #552]	@ (8002544 <HAL_DMA_Init+0x254>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d049      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a88      	ldr	r2, [pc, #544]	@ (8002548 <HAL_DMA_Init+0x258>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d044      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a87      	ldr	r2, [pc, #540]	@ (800254c <HAL_DMA_Init+0x25c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d03f      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a85      	ldr	r2, [pc, #532]	@ (8002550 <HAL_DMA_Init+0x260>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d03a      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a84      	ldr	r2, [pc, #528]	@ (8002554 <HAL_DMA_Init+0x264>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d035      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a82      	ldr	r2, [pc, #520]	@ (8002558 <HAL_DMA_Init+0x268>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d030      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a81      	ldr	r2, [pc, #516]	@ (800255c <HAL_DMA_Init+0x26c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d02b      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a7f      	ldr	r2, [pc, #508]	@ (8002560 <HAL_DMA_Init+0x270>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d026      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7e      	ldr	r2, [pc, #504]	@ (8002564 <HAL_DMA_Init+0x274>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d021      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a7c      	ldr	r2, [pc, #496]	@ (8002568 <HAL_DMA_Init+0x278>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01c      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7b      	ldr	r2, [pc, #492]	@ (800256c <HAL_DMA_Init+0x27c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d017      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a79      	ldr	r2, [pc, #484]	@ (8002570 <HAL_DMA_Init+0x280>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d012      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a78      	ldr	r2, [pc, #480]	@ (8002574 <HAL_DMA_Init+0x284>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00d      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a76      	ldr	r2, [pc, #472]	@ (8002578 <HAL_DMA_Init+0x288>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d008      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a75      	ldr	r2, [pc, #468]	@ (800257c <HAL_DMA_Init+0x28c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d003      	beq.n	80023b4 <HAL_DMA_Init+0xc4>
 80023ac:	21b7      	movs	r1, #183	@ 0xb7
 80023ae:	4874      	ldr	r0, [pc, #464]	@ (8002580 <HAL_DMA_Init+0x290>)
 80023b0:	f7fe fca3 	bl	8000cfa <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d026      	beq.n	800240a <HAL_DMA_Init+0x11a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023c4:	d021      	beq.n	800240a <HAL_DMA_Init+0x11a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023ce:	d01c      	beq.n	800240a <HAL_DMA_Init+0x11a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 80023d8:	d017      	beq.n	800240a <HAL_DMA_Init+0x11a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023e2:	d012      	beq.n	800240a <HAL_DMA_Init+0x11a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 80023ec:	d00d      	beq.n	800240a <HAL_DMA_Init+0x11a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80023f6:	d008      	beq.n	800240a <HAL_DMA_Init+0x11a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8002400:	d003      	beq.n	800240a <HAL_DMA_Init+0x11a>
 8002402:	21b8      	movs	r1, #184	@ 0xb8
 8002404:	485e      	ldr	r0, [pc, #376]	@ (8002580 <HAL_DMA_Init+0x290>)
 8002406:	f7fe fc78 	bl	8000cfa <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_DMA_Init+0x13a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b40      	cmp	r3, #64	@ 0x40
 8002418:	d007      	beq.n	800242a <HAL_DMA_Init+0x13a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b80      	cmp	r3, #128	@ 0x80
 8002420:	d003      	beq.n	800242a <HAL_DMA_Init+0x13a>
 8002422:	21b9      	movs	r1, #185	@ 0xb9
 8002424:	4856      	ldr	r0, [pc, #344]	@ (8002580 <HAL_DMA_Init+0x290>)
 8002426:	f7fe fc68 	bl	8000cfa <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002432:	d007      	beq.n	8002444 <HAL_DMA_Init+0x154>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_DMA_Init+0x154>
 800243c:	21ba      	movs	r1, #186	@ 0xba
 800243e:	4850      	ldr	r0, [pc, #320]	@ (8002580 <HAL_DMA_Init+0x290>)
 8002440:	f7fe fc5b 	bl	8000cfa <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244c:	d007      	beq.n	800245e <HAL_DMA_Init+0x16e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_DMA_Init+0x16e>
 8002456:	21bb      	movs	r1, #187	@ 0xbb
 8002458:	4849      	ldr	r0, [pc, #292]	@ (8002580 <HAL_DMA_Init+0x290>)
 800245a:	f7fe fc4e 	bl	8000cfa <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <HAL_DMA_Init+0x192>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800246e:	d008      	beq.n	8002482 <HAL_DMA_Init+0x192>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002478:	d003      	beq.n	8002482 <HAL_DMA_Init+0x192>
 800247a:	21bc      	movs	r1, #188	@ 0xbc
 800247c:	4840      	ldr	r0, [pc, #256]	@ (8002580 <HAL_DMA_Init+0x290>)
 800247e:	f7fe fc3c 	bl	8000cfa <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <HAL_DMA_Init+0x1b6>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002492:	d008      	beq.n	80024a6 <HAL_DMA_Init+0x1b6>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800249c:	d003      	beq.n	80024a6 <HAL_DMA_Init+0x1b6>
 800249e:	21bd      	movs	r1, #189	@ 0xbd
 80024a0:	4837      	ldr	r0, [pc, #220]	@ (8002580 <HAL_DMA_Init+0x290>)
 80024a2:	f7fe fc2a 	bl	8000cfa <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00c      	beq.n	80024c8 <HAL_DMA_Init+0x1d8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024b6:	d007      	beq.n	80024c8 <HAL_DMA_Init+0x1d8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d003      	beq.n	80024c8 <HAL_DMA_Init+0x1d8>
 80024c0:	21be      	movs	r1, #190	@ 0xbe
 80024c2:	482f      	ldr	r0, [pc, #188]	@ (8002580 <HAL_DMA_Init+0x290>)
 80024c4:	f7fe fc19 	bl	8000cfa <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <HAL_DMA_Init+0x206>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d8:	d00d      	beq.n	80024f6 <HAL_DMA_Init+0x206>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024e2:	d008      	beq.n	80024f6 <HAL_DMA_Init+0x206>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80024ec:	d003      	beq.n	80024f6 <HAL_DMA_Init+0x206>
 80024ee:	21bf      	movs	r1, #191	@ 0xbf
 80024f0:	4823      	ldr	r0, [pc, #140]	@ (8002580 <HAL_DMA_Init+0x290>)
 80024f2:	f7fe fc02 	bl	8000cfa <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <HAL_DMA_Init+0x21e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	2b04      	cmp	r3, #4
 8002504:	d003      	beq.n	800250e <HAL_DMA_Init+0x21e>
 8002506:	21c0      	movs	r1, #192	@ 0xc0
 8002508:	481d      	ldr	r0, [pc, #116]	@ (8002580 <HAL_DMA_Init+0x290>)
 800250a:	f7fe fbf6 	bl	8000cfa <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d064      	beq.n	80025e0 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251a:	2b00      	cmp	r3, #0
 800251c:	d032      	beq.n	8002584 <HAL_DMA_Init+0x294>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	2b01      	cmp	r3, #1
 8002524:	d02e      	beq.n	8002584 <HAL_DMA_Init+0x294>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	2b02      	cmp	r3, #2
 800252c:	d02a      	beq.n	8002584 <HAL_DMA_Init+0x294>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	2b03      	cmp	r3, #3
 8002534:	d026      	beq.n	8002584 <HAL_DMA_Init+0x294>
 8002536:	21c5      	movs	r1, #197	@ 0xc5
 8002538:	4811      	ldr	r0, [pc, #68]	@ (8002580 <HAL_DMA_Init+0x290>)
 800253a:	f7fe fbde 	bl	8000cfa <assert_failed>
 800253e:	e021      	b.n	8002584 <HAL_DMA_Init+0x294>
 8002540:	40026010 	.word	0x40026010
 8002544:	40026028 	.word	0x40026028
 8002548:	40026040 	.word	0x40026040
 800254c:	40026058 	.word	0x40026058
 8002550:	40026070 	.word	0x40026070
 8002554:	40026088 	.word	0x40026088
 8002558:	400260a0 	.word	0x400260a0
 800255c:	400260b8 	.word	0x400260b8
 8002560:	40026410 	.word	0x40026410
 8002564:	40026428 	.word	0x40026428
 8002568:	40026440 	.word	0x40026440
 800256c:	40026458 	.word	0x40026458
 8002570:	40026470 	.word	0x40026470
 8002574:	40026488 	.word	0x40026488
 8002578:	400264a0 	.word	0x400264a0
 800257c:	400264b8 	.word	0x400264b8
 8002580:	08005cac 	.word	0x08005cac
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d012      	beq.n	80025b2 <HAL_DMA_Init+0x2c2>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002594:	d00d      	beq.n	80025b2 <HAL_DMA_Init+0x2c2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800259e:	d008      	beq.n	80025b2 <HAL_DMA_Init+0x2c2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025a8:	d003      	beq.n	80025b2 <HAL_DMA_Init+0x2c2>
 80025aa:	21c6      	movs	r1, #198	@ 0xc6
 80025ac:	485b      	ldr	r0, [pc, #364]	@ (800271c <HAL_DMA_Init+0x42c>)
 80025ae:	f7fe fba4 	bl	8000cfa <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d012      	beq.n	80025e0 <HAL_DMA_Init+0x2f0>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025c2:	d00d      	beq.n	80025e0 <HAL_DMA_Init+0x2f0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025cc:	d008      	beq.n	80025e0 <HAL_DMA_Init+0x2f0>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80025d6:	d003      	beq.n	80025e0 <HAL_DMA_Init+0x2f0>
 80025d8:	21c7      	movs	r1, #199	@ 0xc7
 80025da:	4850      	ldr	r0, [pc, #320]	@ (800271c <HAL_DMA_Init+0x42c>)
 80025dc:	f7fe fb8d 	bl	8000cfa <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002600:	e00f      	b.n	8002622 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002602:	f7ff fd05 	bl	8002010 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b05      	cmp	r3, #5
 800260e:	d908      	bls.n	8002622 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2203      	movs	r2, #3
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e078      	b.n	8002714 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e8      	bne.n	8002602 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4b39      	ldr	r3, [pc, #228]	@ (8002720 <HAL_DMA_Init+0x430>)
 800263c:	4013      	ands	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800264e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	2b04      	cmp	r3, #4
 800267a:	d107      	bne.n	800268c <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	4313      	orrs	r3, r2
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f023 0307 	bic.w	r3, r3, #7
 80026a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d117      	bne.n	80026e6 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00e      	beq.n	80026e6 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fa7f 	bl	8002bcc <DMA_CheckFifoParam>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2240      	movs	r2, #64	@ 0x40
 80026d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026e2:	2301      	movs	r3, #1
 80026e4:	e016      	b.n	8002714 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa36 	bl	8002b60 <DMA_CalcBaseAndBitshift>
 80026f4:	4603      	mov	r3, r0
 80026f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	223f      	movs	r2, #63	@ 0x3f
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	08005cac 	.word	0x08005cac
 8002720:	f010803f 	.word	0xf010803f

08002724 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_DMA_Start_IT+0x26>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002748:	d304      	bcc.n	8002754 <HAL_DMA_Start_IT+0x30>
 800274a:	f240 11cb 	movw	r1, #459	@ 0x1cb
 800274e:	4827      	ldr	r0, [pc, #156]	@ (80027ec <HAL_DMA_Start_IT+0xc8>)
 8002750:	f7fe fad3 	bl	8000cfa <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_DMA_Start_IT+0x3e>
 800275e:	2302      	movs	r3, #2
 8002760:	e040      	b.n	80027e4 <HAL_DMA_Start_IT+0xc0>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d12f      	bne.n	80027d6 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f9ba 	bl	8002b04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	223f      	movs	r2, #63	@ 0x3f
 8002796:	409a      	lsls	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0216 	orr.w	r2, r2, #22
 80027aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0208 	orr.w	r2, r2, #8
 80027c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e005      	b.n	80027e2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027de:	2302      	movs	r3, #2
 80027e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	08005cac 	.word	0x08005cac

080027f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002a38 <HAL_DMA_IRQHandler+0x248>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a8e      	ldr	r2, [pc, #568]	@ (8002a3c <HAL_DMA_IRQHandler+0x24c>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0a9b      	lsrs	r3, r3, #10
 8002808:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281a:	2208      	movs	r2, #8
 800281c:	409a      	lsls	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01a      	beq.n	800285c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d013      	beq.n	800285c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0204 	bic.w	r2, r2, #4
 8002842:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	2208      	movs	r2, #8
 800284a:	409a      	lsls	r2, r3
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	f043 0201 	orr.w	r2, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002860:	2201      	movs	r2, #1
 8002862:	409a      	lsls	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d012      	beq.n	8002892 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	2201      	movs	r2, #1
 8002880:	409a      	lsls	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288a:	f043 0202 	orr.w	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002896:	2204      	movs	r2, #4
 8002898:	409a      	lsls	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d012      	beq.n	80028c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	2204      	movs	r2, #4
 80028b6:	409a      	lsls	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	f043 0204 	orr.w	r2, r3, #4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028cc:	2210      	movs	r2, #16
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d043      	beq.n	8002960 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d03c      	beq.n	8002960 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	2210      	movs	r2, #16
 80028ec:	409a      	lsls	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d018      	beq.n	8002932 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d108      	bne.n	8002920 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d024      	beq.n	8002960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
 800291e:	e01f      	b.n	8002960 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01b      	beq.n	8002960 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
 8002930:	e016      	b.n	8002960 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0208 	bic.w	r2, r2, #8
 800294e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	2220      	movs	r2, #32
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 808f 	beq.w	8002a90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8087 	beq.w	8002a90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	2220      	movs	r2, #32
 8002988:	409a      	lsls	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b05      	cmp	r3, #5
 8002998:	d136      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0216 	bic.w	r2, r2, #22
 80029a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <HAL_DMA_IRQHandler+0x1da>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0208 	bic.w	r2, r2, #8
 80029d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	223f      	movs	r2, #63	@ 0x3f
 80029e0:	409a      	lsls	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d07e      	beq.n	8002afc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
        }
        return;
 8002a06:	e079      	b.n	8002afc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d01d      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10d      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d031      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
 8002a34:	e02c      	b.n	8002a90 <HAL_DMA_IRQHandler+0x2a0>
 8002a36:	bf00      	nop
 8002a38:	20000020 	.word	0x20000020
 8002a3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d023      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
 8002a50:	e01e      	b.n	8002a90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10f      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0210 	bic.w	r2, r2, #16
 8002a6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d032      	beq.n	8002afe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d307      	bcc.n	8002ad8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f2      	bne.n	8002abc <HAL_DMA_IRQHandler+0x2cc>
 8002ad6:	e000      	b.n	8002ada <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ad8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
 8002afa:	e000      	b.n	8002afe <HAL_DMA_IRQHandler+0x30e>
        return;
 8002afc:	bf00      	nop
    }
  }
}
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b40      	cmp	r3, #64	@ 0x40
 8002b30:	d108      	bne.n	8002b44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b42:	e007      	b.n	8002b54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	60da      	str	r2, [r3, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	3b10      	subs	r3, #16
 8002b70:	4a14      	ldr	r2, [pc, #80]	@ (8002bc4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b7a:	4a13      	ldr	r2, [pc, #76]	@ (8002bc8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d909      	bls.n	8002ba2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b96:	f023 0303 	bic.w	r3, r3, #3
 8002b9a:	1d1a      	adds	r2, r3, #4
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ba0:	e007      	b.n	8002bb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	aaaaaaab 	.word	0xaaaaaaab
 8002bc8:	08010720 	.word	0x08010720

08002bcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11f      	bne.n	8002c26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d856      	bhi.n	8002c9a <DMA_CheckFifoParam+0xce>
 8002bec:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf4 <DMA_CheckFifoParam+0x28>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c05 	.word	0x08002c05
 8002bf8:	08002c17 	.word	0x08002c17
 8002bfc:	08002c05 	.word	0x08002c05
 8002c00:	08002c9b 	.word	0x08002c9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d046      	beq.n	8002c9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c14:	e043      	b.n	8002c9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c1e:	d140      	bne.n	8002ca2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c24:	e03d      	b.n	8002ca2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2e:	d121      	bne.n	8002c74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d837      	bhi.n	8002ca6 <DMA_CheckFifoParam+0xda>
 8002c36:	a201      	add	r2, pc, #4	@ (adr r2, 8002c3c <DMA_CheckFifoParam+0x70>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c4d 	.word	0x08002c4d
 8002c40:	08002c53 	.word	0x08002c53
 8002c44:	08002c4d 	.word	0x08002c4d
 8002c48:	08002c65 	.word	0x08002c65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c50:	e030      	b.n	8002cb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d025      	beq.n	8002caa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c62:	e022      	b.n	8002caa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c6c:	d11f      	bne.n	8002cae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c72:	e01c      	b.n	8002cae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d903      	bls.n	8002c82 <DMA_CheckFifoParam+0xb6>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d003      	beq.n	8002c88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c80:	e018      	b.n	8002cb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      break;
 8002c86:	e015      	b.n	8002cb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00e      	beq.n	8002cb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      break;
 8002c98:	e00b      	b.n	8002cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e00a      	b.n	8002cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e008      	b.n	8002cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e006      	b.n	8002cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e004      	b.n	8002cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e002      	b.n	8002cb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb2:	bf00      	nop
    }
  } 
  
  return status; 
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop

08002cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a36      	ldr	r2, [pc, #216]	@ (8002db8 <HAL_GPIO_Init+0xf4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01f      	beq.n	8002d22 <HAL_GPIO_Init+0x5e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a35      	ldr	r2, [pc, #212]	@ (8002dbc <HAL_GPIO_Init+0xf8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01b      	beq.n	8002d22 <HAL_GPIO_Init+0x5e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a34      	ldr	r2, [pc, #208]	@ (8002dc0 <HAL_GPIO_Init+0xfc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d017      	beq.n	8002d22 <HAL_GPIO_Init+0x5e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a33      	ldr	r2, [pc, #204]	@ (8002dc4 <HAL_GPIO_Init+0x100>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0x5e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a32      	ldr	r2, [pc, #200]	@ (8002dc8 <HAL_GPIO_Init+0x104>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <HAL_GPIO_Init+0x5e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a31      	ldr	r2, [pc, #196]	@ (8002dcc <HAL_GPIO_Init+0x108>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <HAL_GPIO_Init+0x5e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a30      	ldr	r2, [pc, #192]	@ (8002dd0 <HAL_GPIO_Init+0x10c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <HAL_GPIO_Init+0x5e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd4 <HAL_GPIO_Init+0x110>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x5e>
 8002d1a:	21ac      	movs	r1, #172	@ 0xac
 8002d1c:	482e      	ldr	r0, [pc, #184]	@ (8002dd8 <HAL_GPIO_Init+0x114>)
 8002d1e:	f7fd ffec 	bl	8000cfa <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d004      	beq.n	8002d36 <HAL_GPIO_Init+0x72>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d34:	d303      	bcc.n	8002d3e <HAL_GPIO_Init+0x7a>
 8002d36:	21ad      	movs	r1, #173	@ 0xad
 8002d38:	4827      	ldr	r0, [pc, #156]	@ (8002dd8 <HAL_GPIO_Init+0x114>)
 8002d3a:	f7fd ffde 	bl	8000cfa <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d035      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d031      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b11      	cmp	r3, #17
 8002d54:	d02d      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d029      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b12      	cmp	r3, #18
 8002d64:	d025      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002d6e:	d020      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002d78:	d01b      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002d82:	d016      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8002d8c:	d011      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002d96:	d00c      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002da0:	d007      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0xee>
 8002daa:	21ae      	movs	r1, #174	@ 0xae
 8002dac:	480a      	ldr	r0, [pc, #40]	@ (8002dd8 <HAL_GPIO_Init+0x114>)
 8002dae:	f7fd ffa4 	bl	8000cfa <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	e288      	b.n	80032ca <HAL_GPIO_Init+0x606>
 8002db8:	40020000 	.word	0x40020000
 8002dbc:	40020400 	.word	0x40020400
 8002dc0:	40020800 	.word	0x40020800
 8002dc4:	40020c00 	.word	0x40020c00
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40021400 	.word	0x40021400
 8002dd0:	40021800 	.word	0x40021800
 8002dd4:	40021c00 	.word	0x40021c00
 8002dd8:	08005ce4 	.word	0x08005ce4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	f040 8265 	bne.w	80032c4 <HAL_GPIO_Init+0x600>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d005      	beq.n	8002e12 <HAL_GPIO_Init+0x14e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d144      	bne.n	8002e9c <HAL_GPIO_Init+0x1d8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00f      	beq.n	8002e3a <HAL_GPIO_Init+0x176>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d00b      	beq.n	8002e3a <HAL_GPIO_Init+0x176>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d007      	beq.n	8002e3a <HAL_GPIO_Init+0x176>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_Init+0x176>
 8002e32:	21c0      	movs	r1, #192	@ 0xc0
 8002e34:	4831      	ldr	r0, [pc, #196]	@ (8002efc <HAL_GPIO_Init+0x238>)
 8002e36:	f7fd ff60 	bl	8000cfa <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e70:	2201      	movs	r2, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 0201 	and.w	r2, r3, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d02b      	beq.n	8002f00 <HAL_GPIO_Init+0x23c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <HAL_GPIO_Init+0x204>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d007      	beq.n	8002ec8 <HAL_GPIO_Init+0x204>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x204>
 8002ec0:	21d1      	movs	r1, #209	@ 0xd1
 8002ec2:	480e      	ldr	r0, [pc, #56]	@ (8002efc <HAL_GPIO_Init+0x238>)
 8002ec4:	f7fd ff19 	bl	8000cfa <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	e002      	b.n	8002f00 <HAL_GPIO_Init+0x23c>
 8002efa:	bf00      	nop
 8002efc:	08005ce4 	.word	0x08005ce4
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	f040 810c 	bne.w	8003126 <HAL_GPIO_Init+0x462>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80e3 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b09      	cmp	r3, #9
 8002f1e:	f000 80de 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 80d9 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80d4 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80cf 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80ca 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	f000 80c5 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	f000 80c0 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	f000 80bb 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	f000 80b6 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	f000 80b1 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	f000 80ac 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	f000 80a7 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	f000 80a2 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	f000 809d 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	f000 8098 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	f000 8093 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b09      	cmp	r3, #9
 8002fbe:	f000 808e 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	f000 8089 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b09      	cmp	r3, #9
 8002fd2:	f000 8084 	beq.w	80030de <HAL_GPIO_Init+0x41a>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b07      	cmp	r3, #7
 8002fdc:	d07f      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b07      	cmp	r3, #7
 8002fe4:	d07b      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b07      	cmp	r3, #7
 8002fec:	d077      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d073      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d06f      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b08      	cmp	r3, #8
 8003004:	d06b      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b09      	cmp	r3, #9
 800300c:	d067      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b09      	cmp	r3, #9
 8003014:	d063      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b0a      	cmp	r3, #10
 800301c:	d05f      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b0a      	cmp	r3, #10
 8003024:	d05b      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b0b      	cmp	r3, #11
 800302c:	d057      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d053      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d04f      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b0d      	cmp	r3, #13
 8003044:	d04b      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	d047      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b05      	cmp	r3, #5
 8003054:	d043      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d03f      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b06      	cmp	r3, #6
 8003064:	d03b      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d037      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b04      	cmp	r3, #4
 8003074:	d033      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b05      	cmp	r3, #5
 800307c:	d02f      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d02b      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d027      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b07      	cmp	r3, #7
 8003094:	d023      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b07      	cmp	r3, #7
 800309c:	d01f      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b07      	cmp	r3, #7
 80030a4:	d01b      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b07      	cmp	r3, #7
 80030ac:	d017      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d00f      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b09      	cmp	r3, #9
 80030c4:	d00b      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b0a      	cmp	r3, #10
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b0a      	cmp	r3, #10
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x41a>
 80030d6:	21de      	movs	r1, #222	@ 0xde
 80030d8:	4880      	ldr	r0, [pc, #512]	@ (80032dc <HAL_GPIO_Init+0x618>)
 80030da:	f7fd fe0e 	bl	8000cfa <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	220f      	movs	r2, #15
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	08da      	lsrs	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3208      	adds	r2, #8
 8003120:	69b9      	ldr	r1, [r7, #24]
 8003122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	2203      	movs	r2, #3
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0203 	and.w	r2, r3, #3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80ae 	beq.w	80032c4 <HAL_GPIO_Init+0x600>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	4b5c      	ldr	r3, [pc, #368]	@ (80032e0 <HAL_GPIO_Init+0x61c>)
 800316e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003170:	4a5b      	ldr	r2, [pc, #364]	@ (80032e0 <HAL_GPIO_Init+0x61c>)
 8003172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003176:	6453      	str	r3, [r2, #68]	@ 0x44
 8003178:	4b59      	ldr	r3, [pc, #356]	@ (80032e0 <HAL_GPIO_Init+0x61c>)
 800317a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003184:	4a57      	ldr	r2, [pc, #348]	@ (80032e4 <HAL_GPIO_Init+0x620>)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a4f      	ldr	r2, [pc, #316]	@ (80032e8 <HAL_GPIO_Init+0x624>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d025      	beq.n	80031fc <HAL_GPIO_Init+0x538>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a4e      	ldr	r2, [pc, #312]	@ (80032ec <HAL_GPIO_Init+0x628>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d01f      	beq.n	80031f8 <HAL_GPIO_Init+0x534>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a4d      	ldr	r2, [pc, #308]	@ (80032f0 <HAL_GPIO_Init+0x62c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d019      	beq.n	80031f4 <HAL_GPIO_Init+0x530>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a4c      	ldr	r2, [pc, #304]	@ (80032f4 <HAL_GPIO_Init+0x630>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <HAL_GPIO_Init+0x52c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a4b      	ldr	r2, [pc, #300]	@ (80032f8 <HAL_GPIO_Init+0x634>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00d      	beq.n	80031ec <HAL_GPIO_Init+0x528>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a4a      	ldr	r2, [pc, #296]	@ (80032fc <HAL_GPIO_Init+0x638>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <HAL_GPIO_Init+0x524>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a49      	ldr	r2, [pc, #292]	@ (8003300 <HAL_GPIO_Init+0x63c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_GPIO_Init+0x520>
 80031e0:	2306      	movs	r3, #6
 80031e2:	e00c      	b.n	80031fe <HAL_GPIO_Init+0x53a>
 80031e4:	2307      	movs	r3, #7
 80031e6:	e00a      	b.n	80031fe <HAL_GPIO_Init+0x53a>
 80031e8:	2305      	movs	r3, #5
 80031ea:	e008      	b.n	80031fe <HAL_GPIO_Init+0x53a>
 80031ec:	2304      	movs	r3, #4
 80031ee:	e006      	b.n	80031fe <HAL_GPIO_Init+0x53a>
 80031f0:	2303      	movs	r3, #3
 80031f2:	e004      	b.n	80031fe <HAL_GPIO_Init+0x53a>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e002      	b.n	80031fe <HAL_GPIO_Init+0x53a>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_GPIO_Init+0x53a>
 80031fc:	2300      	movs	r3, #0
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	f002 0203 	and.w	r2, r2, #3
 8003204:	0092      	lsls	r2, r2, #2
 8003206:	4093      	lsls	r3, r2
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800320e:	4935      	ldr	r1, [pc, #212]	@ (80032e4 <HAL_GPIO_Init+0x620>)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	3302      	adds	r3, #2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321c:	4b39      	ldr	r3, [pc, #228]	@ (8003304 <HAL_GPIO_Init+0x640>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x57c>
        {
          temp |= iocurrent;
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003240:	4a30      	ldr	r2, [pc, #192]	@ (8003304 <HAL_GPIO_Init+0x640>)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003246:	4b2f      	ldr	r3, [pc, #188]	@ (8003304 <HAL_GPIO_Init+0x640>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x5a6>
        {
          temp |= iocurrent;
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800326a:	4a26      	ldr	r2, [pc, #152]	@ (8003304 <HAL_GPIO_Init+0x640>)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003270:	4b24      	ldr	r3, [pc, #144]	@ (8003304 <HAL_GPIO_Init+0x640>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x5d0>
        {
          temp |= iocurrent;
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003294:	4a1b      	ldr	r2, [pc, #108]	@ (8003304 <HAL_GPIO_Init+0x640>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800329a:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <HAL_GPIO_Init+0x640>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x5fa>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032be:	4a11      	ldr	r2, [pc, #68]	@ (8003304 <HAL_GPIO_Init+0x640>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	3301      	adds	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	2b0f      	cmp	r3, #15
 80032ce:	f67f ad85 	bls.w	8002ddc <HAL_GPIO_Init+0x118>
      }
    }
  }
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	08005ce4 	.word	0x08005ce4
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40020000 	.word	0x40020000
 80032ec:	40020400 	.word	0x40020400
 80032f0:	40020800 	.word	0x40020800
 80032f4:	40020c00 	.word	0x40020c00
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40021400 	.word	0x40021400
 8003300:	40021800 	.word	0x40021800
 8003304:	40013c00 	.word	0x40013c00

08003308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]
 8003314:	4613      	mov	r3, r2
 8003316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <HAL_GPIO_WritePin+0x20>
 800331e:	f240 119d 	movw	r1, #413	@ 0x19d
 8003322:	480e      	ldr	r0, [pc, #56]	@ (800335c <HAL_GPIO_WritePin+0x54>)
 8003324:	f7fd fce9 	bl	8000cfa <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003328:	787b      	ldrb	r3, [r7, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_GPIO_WritePin+0x36>
 800332e:	787b      	ldrb	r3, [r7, #1]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d004      	beq.n	800333e <HAL_GPIO_WritePin+0x36>
 8003334:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8003338:	4808      	ldr	r0, [pc, #32]	@ (800335c <HAL_GPIO_WritePin+0x54>)
 800333a:	f7fd fcde 	bl	8000cfa <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800333e:	787b      	ldrb	r3, [r7, #1]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003344:	887a      	ldrh	r2, [r7, #2]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800334a:	e003      	b.n	8003354 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	041a      	lsls	r2, r3, #16
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	08005ce4 	.word	0x08005ce4

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e18c      	b.n	800368e <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_RCC_ClockConfig+0x24>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b0f      	cmp	r3, #15
 8003382:	d904      	bls.n	800338e <HAL_RCC_ClockConfig+0x2e>
 8003384:	f240 215a 	movw	r1, #602	@ 0x25a
 8003388:	4887      	ldr	r0, [pc, #540]	@ (80035a8 <HAL_RCC_ClockConfig+0x248>)
 800338a:	f7fd fcb6 	bl	8000cfa <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d031      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d02e      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d02b      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d028      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d025      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d022      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b06      	cmp	r3, #6
 80033b6:	d01f      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b07      	cmp	r3, #7
 80033bc:	d01c      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d019      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b09      	cmp	r3, #9
 80033c8:	d016      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b0a      	cmp	r3, #10
 80033ce:	d013      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b0b      	cmp	r3, #11
 80033d4:	d010      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	d00d      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b0d      	cmp	r3, #13
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b0e      	cmp	r3, #14
 80033e6:	d007      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	d004      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x98>
 80033ee:	f240 215b 	movw	r1, #603	@ 0x25b
 80033f2:	486d      	ldr	r0, [pc, #436]	@ (80035a8 <HAL_RCC_ClockConfig+0x248>)
 80033f4:	f7fd fc81 	bl	8000cfa <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f8:	4b6c      	ldr	r3, [pc, #432]	@ (80035ac <HAL_RCC_ClockConfig+0x24c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d90c      	bls.n	8003420 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b69      	ldr	r3, [pc, #420]	@ (80035ac <HAL_RCC_ClockConfig+0x24c>)
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b67      	ldr	r3, [pc, #412]	@ (80035ac <HAL_RCC_ClockConfig+0x24c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e136      	b.n	800368e <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d049      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003438:	4b5d      	ldr	r3, [pc, #372]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a5c      	ldr	r2, [pc, #368]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 800343e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003442:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003450:	4b57      	ldr	r3, [pc, #348]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4a56      	ldr	r2, [pc, #344]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 8003456:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800345a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d024      	beq.n	80034ae <HAL_RCC_ClockConfig+0x14e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b80      	cmp	r3, #128	@ 0x80
 800346a:	d020      	beq.n	80034ae <HAL_RCC_ClockConfig+0x14e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b90      	cmp	r3, #144	@ 0x90
 8003472:	d01c      	beq.n	80034ae <HAL_RCC_ClockConfig+0x14e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2ba0      	cmp	r3, #160	@ 0xa0
 800347a:	d018      	beq.n	80034ae <HAL_RCC_ClockConfig+0x14e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2bb0      	cmp	r3, #176	@ 0xb0
 8003482:	d014      	beq.n	80034ae <HAL_RCC_ClockConfig+0x14e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2bc0      	cmp	r3, #192	@ 0xc0
 800348a:	d010      	beq.n	80034ae <HAL_RCC_ClockConfig+0x14e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2bd0      	cmp	r3, #208	@ 0xd0
 8003492:	d00c      	beq.n	80034ae <HAL_RCC_ClockConfig+0x14e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2be0      	cmp	r3, #224	@ 0xe0
 800349a:	d008      	beq.n	80034ae <HAL_RCC_ClockConfig+0x14e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2bf0      	cmp	r3, #240	@ 0xf0
 80034a2:	d004      	beq.n	80034ae <HAL_RCC_ClockConfig+0x14e>
 80034a4:	f240 217e 	movw	r1, #638	@ 0x27e
 80034a8:	483f      	ldr	r0, [pc, #252]	@ (80035a8 <HAL_RCC_ClockConfig+0x248>)
 80034aa:	f7fd fc26 	bl	8000cfa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ae:	4b40      	ldr	r3, [pc, #256]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	493d      	ldr	r1, [pc, #244]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d059      	beq.n	8003580 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d010      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x196>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d00c      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x196>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x196>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d004      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x196>
 80034ec:	f240 2185 	movw	r1, #645	@ 0x285
 80034f0:	482d      	ldr	r0, [pc, #180]	@ (80035a8 <HAL_RCC_ClockConfig+0x248>)
 80034f2:	f7fd fc02 	bl	8000cfa <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d119      	bne.n	800353e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e0bf      	b.n	800368e <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d003      	beq.n	800351e <HAL_RCC_ClockConfig+0x1be>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351a:	2b03      	cmp	r3, #3
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351e:	4b24      	ldr	r3, [pc, #144]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0af      	b.n	800368e <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352e:	4b20      	ldr	r3, [pc, #128]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0a7      	b.n	800368e <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353e:	4b1c      	ldr	r3, [pc, #112]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 0203 	bic.w	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4919      	ldr	r1, [pc, #100]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003550:	f7fe fd5e 	bl	8002010 <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	e00a      	b.n	800356e <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003558:	f7fe fd5a 	bl	8002010 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e08f      	b.n	800368e <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	4b10      	ldr	r3, [pc, #64]	@ (80035b0 <HAL_RCC_ClockConfig+0x250>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 020c 	and.w	r2, r3, #12
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	429a      	cmp	r2, r3
 800357e:	d1eb      	bne.n	8003558 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003580:	4b0a      	ldr	r3, [pc, #40]	@ (80035ac <HAL_RCC_ClockConfig+0x24c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d212      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x254>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b07      	ldr	r3, [pc, #28]	@ (80035ac <HAL_RCC_ClockConfig+0x24c>)
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <HAL_RCC_ClockConfig+0x24c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d007      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e072      	b.n	800368e <HAL_RCC_ClockConfig+0x32e>
 80035a8:	08005d20 	.word	0x08005d20
 80035ac:	40023c00 	.word	0x40023c00
 80035b0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d025      	beq.n	800360c <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d018      	beq.n	80035fa <HAL_RCC_ClockConfig+0x29a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d0:	d013      	beq.n	80035fa <HAL_RCC_ClockConfig+0x29a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80035da:	d00e      	beq.n	80035fa <HAL_RCC_ClockConfig+0x29a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x29a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80035ee:	d004      	beq.n	80035fa <HAL_RCC_ClockConfig+0x29a>
 80035f0:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80035f4:	4828      	ldr	r0, [pc, #160]	@ (8003698 <HAL_RCC_ClockConfig+0x338>)
 80035f6:	f7fd fb80 	bl	8000cfa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035fa:	4b28      	ldr	r3, [pc, #160]	@ (800369c <HAL_RCC_ClockConfig+0x33c>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	4925      	ldr	r1, [pc, #148]	@ (800369c <HAL_RCC_ClockConfig+0x33c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d026      	beq.n	8003666 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d018      	beq.n	8003652 <HAL_RCC_ClockConfig+0x2f2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003628:	d013      	beq.n	8003652 <HAL_RCC_ClockConfig+0x2f2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003632:	d00e      	beq.n	8003652 <HAL_RCC_ClockConfig+0x2f2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x2f2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8003646:	d004      	beq.n	8003652 <HAL_RCC_ClockConfig+0x2f2>
 8003648:	f240 21ca 	movw	r1, #714	@ 0x2ca
 800364c:	4812      	ldr	r0, [pc, #72]	@ (8003698 <HAL_RCC_ClockConfig+0x338>)
 800364e:	f7fd fb54 	bl	8000cfa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003652:	4b12      	ldr	r3, [pc, #72]	@ (800369c <HAL_RCC_ClockConfig+0x33c>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	490e      	ldr	r1, [pc, #56]	@ (800369c <HAL_RCC_ClockConfig+0x33c>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003666:	f000 f855 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 800366a:	4602      	mov	r2, r0
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_ClockConfig+0x33c>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	490a      	ldr	r1, [pc, #40]	@ (80036a0 <HAL_RCC_ClockConfig+0x340>)
 8003678:	5ccb      	ldrb	r3, [r1, r3]
 800367a:	fa22 f303 	lsr.w	r3, r2, r3
 800367e:	4a09      	ldr	r2, [pc, #36]	@ (80036a4 <HAL_RCC_ClockConfig+0x344>)
 8003680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003682:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <HAL_RCC_ClockConfig+0x348>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe fc7e 	bl	8001f88 <HAL_InitTick>

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	08005d20 	.word	0x08005d20
 800369c:	40023800 	.word	0x40023800
 80036a0:	08010708 	.word	0x08010708
 80036a4:	20000020 	.word	0x20000020
 80036a8:	20000024 	.word	0x20000024

080036ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b0:	4b03      	ldr	r3, [pc, #12]	@ (80036c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000020 	.word	0x20000020

080036c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036c8:	f7ff fff0 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	0a9b      	lsrs	r3, r3, #10
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	4903      	ldr	r1, [pc, #12]	@ (80036e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036da:	5ccb      	ldrb	r3, [r1, r3]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40023800 	.word	0x40023800
 80036e8:	08010718 	.word	0x08010718

080036ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036f0:	f7ff ffdc 	bl	80036ac <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b05      	ldr	r3, [pc, #20]	@ (800370c <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	0b5b      	lsrs	r3, r3, #13
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4903      	ldr	r1, [pc, #12]	@ (8003710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	08010718 	.word	0x08010718

08003714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003718:	b0ae      	sub	sp, #184	@ 0xb8
 800371a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800373a:	4bcb      	ldr	r3, [pc, #812]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x354>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b0c      	cmp	r3, #12
 8003744:	f200 8206 	bhi.w	8003b54 <HAL_RCC_GetSysClockFreq+0x440>
 8003748:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <HAL_RCC_GetSysClockFreq+0x3c>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003785 	.word	0x08003785
 8003754:	08003b55 	.word	0x08003b55
 8003758:	08003b55 	.word	0x08003b55
 800375c:	08003b55 	.word	0x08003b55
 8003760:	0800378d 	.word	0x0800378d
 8003764:	08003b55 	.word	0x08003b55
 8003768:	08003b55 	.word	0x08003b55
 800376c:	08003b55 	.word	0x08003b55
 8003770:	08003795 	.word	0x08003795
 8003774:	08003b55 	.word	0x08003b55
 8003778:	08003b55 	.word	0x08003b55
 800377c:	08003b55 	.word	0x08003b55
 8003780:	08003985 	.word	0x08003985
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4bb9      	ldr	r3, [pc, #740]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x358>)
 8003786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800378a:	e1e7      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378c:	4bb8      	ldr	r3, [pc, #736]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x35c>)
 800378e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003792:	e1e3      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003794:	4bb4      	ldr	r3, [pc, #720]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800379c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a0:	4bb1      	ldr	r3, [pc, #708]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x354>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d071      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ac:	4bae      	ldr	r3, [pc, #696]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80037bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037c8:	2300      	movs	r3, #0
 80037ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037d2:	4622      	mov	r2, r4
 80037d4:	462b      	mov	r3, r5
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	0159      	lsls	r1, r3, #5
 80037e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e4:	0150      	lsls	r0, r2, #5
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4621      	mov	r1, r4
 80037ec:	1a51      	subs	r1, r2, r1
 80037ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80037f0:	4629      	mov	r1, r5
 80037f2:	eb63 0301 	sbc.w	r3, r3, r1
 80037f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003804:	4649      	mov	r1, r9
 8003806:	018b      	lsls	r3, r1, #6
 8003808:	4641      	mov	r1, r8
 800380a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800380e:	4641      	mov	r1, r8
 8003810:	018a      	lsls	r2, r1, #6
 8003812:	4641      	mov	r1, r8
 8003814:	1a51      	subs	r1, r2, r1
 8003816:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003818:	4649      	mov	r1, r9
 800381a:	eb63 0301 	sbc.w	r3, r3, r1
 800381e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800382c:	4649      	mov	r1, r9
 800382e:	00cb      	lsls	r3, r1, #3
 8003830:	4641      	mov	r1, r8
 8003832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003836:	4641      	mov	r1, r8
 8003838:	00ca      	lsls	r2, r1, #3
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	4603      	mov	r3, r0
 8003840:	4622      	mov	r2, r4
 8003842:	189b      	adds	r3, r3, r2
 8003844:	633b      	str	r3, [r7, #48]	@ 0x30
 8003846:	462b      	mov	r3, r5
 8003848:	460a      	mov	r2, r1
 800384a:	eb42 0303 	adc.w	r3, r2, r3
 800384e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800385c:	4629      	mov	r1, r5
 800385e:	024b      	lsls	r3, r1, #9
 8003860:	4621      	mov	r1, r4
 8003862:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003866:	4621      	mov	r1, r4
 8003868:	024a      	lsls	r2, r1, #9
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003872:	2200      	movs	r2, #0
 8003874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003878:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800387c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003880:	f7fc fcc0 	bl	8000204 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800388e:	e067      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003890:	4b75      	ldr	r3, [pc, #468]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	099b      	lsrs	r3, r3, #6
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800389c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80038a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038aa:	2300      	movs	r3, #0
 80038ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80038b2:	4622      	mov	r2, r4
 80038b4:	462b      	mov	r3, r5
 80038b6:	f04f 0000 	mov.w	r0, #0
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	0159      	lsls	r1, r3, #5
 80038c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c4:	0150      	lsls	r0, r2, #5
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4621      	mov	r1, r4
 80038cc:	1a51      	subs	r1, r2, r1
 80038ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80038d0:	4629      	mov	r1, r5
 80038d2:	eb63 0301 	sbc.w	r3, r3, r1
 80038d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80038e4:	4649      	mov	r1, r9
 80038e6:	018b      	lsls	r3, r1, #6
 80038e8:	4641      	mov	r1, r8
 80038ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ee:	4641      	mov	r1, r8
 80038f0:	018a      	lsls	r2, r1, #6
 80038f2:	4641      	mov	r1, r8
 80038f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80038f8:	4649      	mov	r1, r9
 80038fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800390a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800390e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003912:	4692      	mov	sl, r2
 8003914:	469b      	mov	fp, r3
 8003916:	4623      	mov	r3, r4
 8003918:	eb1a 0303 	adds.w	r3, sl, r3
 800391c:	623b      	str	r3, [r7, #32]
 800391e:	462b      	mov	r3, r5
 8003920:	eb4b 0303 	adc.w	r3, fp, r3
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003932:	4629      	mov	r1, r5
 8003934:	028b      	lsls	r3, r1, #10
 8003936:	4621      	mov	r1, r4
 8003938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800393c:	4621      	mov	r1, r4
 800393e:	028a      	lsls	r2, r1, #10
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003948:	2200      	movs	r2, #0
 800394a:	673b      	str	r3, [r7, #112]	@ 0x70
 800394c:	677a      	str	r2, [r7, #116]	@ 0x74
 800394e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003952:	f7fc fc57 	bl	8000204 <__aeabi_uldivmod>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4613      	mov	r3, r2
 800395c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003960:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	3301      	adds	r3, #1
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003982:	e0eb      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003984:	4b38      	ldr	r3, [pc, #224]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800398c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003990:	4b35      	ldr	r3, [pc, #212]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d06b      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399c:	4b32      	ldr	r3, [pc, #200]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x354>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	099b      	lsrs	r3, r3, #6
 80039a2:	2200      	movs	r2, #0
 80039a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80039b0:	2300      	movs	r3, #0
 80039b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80039b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039b8:	4622      	mov	r2, r4
 80039ba:	462b      	mov	r3, r5
 80039bc:	f04f 0000 	mov.w	r0, #0
 80039c0:	f04f 0100 	mov.w	r1, #0
 80039c4:	0159      	lsls	r1, r3, #5
 80039c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ca:	0150      	lsls	r0, r2, #5
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4621      	mov	r1, r4
 80039d2:	1a51      	subs	r1, r2, r1
 80039d4:	61b9      	str	r1, [r7, #24]
 80039d6:	4629      	mov	r1, r5
 80039d8:	eb63 0301 	sbc.w	r3, r3, r1
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039ea:	4659      	mov	r1, fp
 80039ec:	018b      	lsls	r3, r1, #6
 80039ee:	4651      	mov	r1, sl
 80039f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039f4:	4651      	mov	r1, sl
 80039f6:	018a      	lsls	r2, r1, #6
 80039f8:	4651      	mov	r1, sl
 80039fa:	ebb2 0801 	subs.w	r8, r2, r1
 80039fe:	4659      	mov	r1, fp
 8003a00:	eb63 0901 	sbc.w	r9, r3, r1
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a18:	4690      	mov	r8, r2
 8003a1a:	4699      	mov	r9, r3
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	eb18 0303 	adds.w	r3, r8, r3
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	462b      	mov	r3, r5
 8003a26:	eb49 0303 	adc.w	r3, r9, r3
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a38:	4629      	mov	r1, r5
 8003a3a:	024b      	lsls	r3, r1, #9
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a42:	4621      	mov	r1, r4
 8003a44:	024a      	lsls	r2, r1, #9
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a4e:	2200      	movs	r2, #0
 8003a50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a58:	f7fc fbd4 	bl	8000204 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4613      	mov	r3, r2
 8003a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a66:	e065      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x420>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	00f42400 	.word	0x00f42400
 8003a70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a74:	4b3d      	ldr	r3, [pc, #244]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x458>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	4611      	mov	r1, r2
 8003a80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a84:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a86:	2300      	movs	r3, #0
 8003a88:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003a8e:	4642      	mov	r2, r8
 8003a90:	464b      	mov	r3, r9
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	f04f 0100 	mov.w	r1, #0
 8003a9a:	0159      	lsls	r1, r3, #5
 8003a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa0:	0150      	lsls	r0, r2, #5
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4641      	mov	r1, r8
 8003aa8:	1a51      	subs	r1, r2, r1
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	4649      	mov	r1, r9
 8003aae:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ac0:	4659      	mov	r1, fp
 8003ac2:	018b      	lsls	r3, r1, #6
 8003ac4:	4651      	mov	r1, sl
 8003ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aca:	4651      	mov	r1, sl
 8003acc:	018a      	lsls	r2, r1, #6
 8003ace:	4651      	mov	r1, sl
 8003ad0:	1a54      	subs	r4, r2, r1
 8003ad2:	4659      	mov	r1, fp
 8003ad4:	eb63 0501 	sbc.w	r5, r3, r1
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	00eb      	lsls	r3, r5, #3
 8003ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae6:	00e2      	lsls	r2, r4, #3
 8003ae8:	4614      	mov	r4, r2
 8003aea:	461d      	mov	r5, r3
 8003aec:	4643      	mov	r3, r8
 8003aee:	18e3      	adds	r3, r4, r3
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	464b      	mov	r3, r9
 8003af4:	eb45 0303 	adc.w	r3, r5, r3
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b06:	4629      	mov	r1, r5
 8003b08:	028b      	lsls	r3, r1, #10
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b10:	4621      	mov	r1, r4
 8003b12:	028a      	lsls	r2, r1, #10
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b26:	f7fc fb6d 	bl	8000204 <__aeabi_uldivmod>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4613      	mov	r3, r2
 8003b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b34:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x458>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	0f1b      	lsrs	r3, r3, #28
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b52:	e003      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b54:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	37b8      	adds	r7, #184	@ 0xb8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	00f42400 	.word	0x00f42400

08003b74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e34b      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	d904      	bls.n	8003b98 <HAL_RCC_OscConfig+0x24>
 8003b8e:	f640 513d 	movw	r1, #3389	@ 0xd3d
 8003b92:	4893      	ldr	r0, [pc, #588]	@ (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	f7fd f8b1 	bl	8000cfa <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8096 	beq.w	8003cd2 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <HAL_RCC_OscConfig+0x58>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb6:	d009      	beq.n	8003bcc <HAL_RCC_OscConfig+0x58>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bc0:	d004      	beq.n	8003bcc <HAL_RCC_OscConfig+0x58>
 8003bc2:	f640 5142 	movw	r1, #3394	@ 0xd42
 8003bc6:	4886      	ldr	r0, [pc, #536]	@ (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	f7fd f897 	bl	8000cfa <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bcc:	4b85      	ldr	r3, [pc, #532]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d019      	beq.n	8003c0c <HAL_RCC_OscConfig+0x98>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003bd8:	4b82      	ldr	r3, [pc, #520]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 030c 	and.w	r3, r3, #12
        || \
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x7e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003be4:	4b7f      	ldr	r3, [pc, #508]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bf0:	d00c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x98>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d112      	bne.n	8003c24 <HAL_RCC_OscConfig+0xb0>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfe:	4b79      	ldr	r3, [pc, #484]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c0a:	d10b      	bne.n	8003c24 <HAL_RCC_OscConfig+0xb0>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	4b75      	ldr	r3, [pc, #468]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d05b      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x15c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d157      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e2fc      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCC_OscConfig+0xc8>
 8003c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6c      	ldr	r2, [pc, #432]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e01d      	b.n	8003c78 <HAL_RCC_OscConfig+0x104>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0xec>
 8003c46:	4b67      	ldr	r3, [pc, #412]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a66      	ldr	r2, [pc, #408]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b64      	ldr	r3, [pc, #400]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a63      	ldr	r2, [pc, #396]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0x104>
 8003c60:	4b60      	ldr	r3, [pc, #384]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a5f      	ldr	r2, [pc, #380]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b5d      	ldr	r3, [pc, #372]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5c      	ldr	r2, [pc, #368]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe f9c6 	bl	8002010 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x126>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe f9c2 	bl	8002010 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	@ 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e2c1      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b52      	ldr	r3, [pc, #328]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x114>
 8003ca6:	e014      	b.n	8003cd2 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fe f9b2 	bl	8002010 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x14e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fe f9ae 	bl	8002010 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	@ 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e2ad      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	4b48      	ldr	r3, [pc, #288]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x13c>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x15e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 808c 	beq.w	8003df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_RCC_OscConfig+0x186>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d004      	beq.n	8003cfa <HAL_RCC_OscConfig+0x186>
 8003cf0:	f640 517c 	movw	r1, #3452	@ 0xd7c
 8003cf4:	483a      	ldr	r0, [pc, #232]	@ (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	f7fd f800 	bl	8000cfa <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b1f      	cmp	r3, #31
 8003d00:	d904      	bls.n	8003d0c <HAL_RCC_OscConfig+0x198>
 8003d02:	f640 517d 	movw	r1, #3453	@ 0xd7d
 8003d06:	4836      	ldr	r0, [pc, #216]	@ (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003d08:	f7fc fff7 	bl	8000cfa <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d0c:	4b35      	ldr	r3, [pc, #212]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d017      	beq.n	8003d48 <HAL_RCC_OscConfig+0x1d4>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d18:	4b32      	ldr	r3, [pc, #200]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d105      	bne.n	8003d30 <HAL_RCC_OscConfig+0x1bc>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d24:	4b2f      	ldr	r3, [pc, #188]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <HAL_RCC_OscConfig+0x1d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d30:	4b2c      	ldr	r3, [pc, #176]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d11c      	bne.n	8003d76 <HAL_RCC_OscConfig+0x202>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3c:	4b29      	ldr	r3, [pc, #164]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d116      	bne.n	8003d76 <HAL_RCC_OscConfig+0x202>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d48:	4b26      	ldr	r3, [pc, #152]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_OscConfig+0x1ec>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e25e      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	491d      	ldr	r1, [pc, #116]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d74:	e040      	b.n	8003df8 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d020      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003de8 <HAL_RCC_OscConfig+0x274>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe f944 	bl	8002010 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8c:	f7fe f940 	bl	8002010 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e23f      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9e:	4b11      	ldr	r3, [pc, #68]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003daa:	4b0e      	ldr	r3, [pc, #56]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	490a      	ldr	r1, [pc, #40]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
 8003dbe:	e01b      	b.n	8003df8 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc0:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <HAL_RCC_OscConfig+0x274>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fe f923 	bl	8002010 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dcc:	e00e      	b.n	8003dec <HAL_RCC_OscConfig+0x278>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fe f91f 	bl	8002010 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d907      	bls.n	8003dec <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e21e      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
 8003de0:	08005d58 	.word	0x08005d58
 8003de4:	40023800 	.word	0x40023800
 8003de8:	42470000 	.word	0x42470000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dec:	4b74      	ldr	r3, [pc, #464]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ea      	bne.n	8003dce <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03d      	beq.n	8003e80 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2aa>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d004      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2aa>
 8003e14:	f640 51c5 	movw	r1, #3525	@ 0xdc5
 8003e18:	486a      	ldr	r0, [pc, #424]	@ (8003fc4 <HAL_RCC_OscConfig+0x450>)
 8003e1a:	f7fc ff6e 	bl	8000cfa <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e26:	4b68      	ldr	r3, [pc, #416]	@ (8003fc8 <HAL_RCC_OscConfig+0x454>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2c:	f7fe f8f0 	bl	8002010 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x2d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e34:	f7fe f8ec 	bl	8002010 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e1eb      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e46:	4b5e      	ldr	r3, [pc, #376]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x2c0>
 8003e52:	e015      	b.n	8003e80 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e54:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc8 <HAL_RCC_OscConfig+0x454>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fe f8d9 	bl	8002010 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x300>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e62:	f7fe f8d5 	bl	8002010 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e1d4      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	4b52      	ldr	r3, [pc, #328]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80b0 	beq.w	8003fee <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x340>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x340>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d004      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x340>
 8003eaa:	f640 51f1 	movw	r1, #3569	@ 0xdf1
 8003eae:	4845      	ldr	r0, [pc, #276]	@ (8003fc4 <HAL_RCC_OscConfig+0x450>)
 8003eb0:	f7fc ff23 	bl	8000cfa <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb4:	4b42      	ldr	r3, [pc, #264]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10f      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	4a3d      	ldr	r2, [pc, #244]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8003fcc <HAL_RCC_OscConfig+0x458>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d118      	bne.n	8003f1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eec:	4b37      	ldr	r3, [pc, #220]	@ (8003fcc <HAL_RCC_OscConfig+0x458>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a36      	ldr	r2, [pc, #216]	@ (8003fcc <HAL_RCC_OscConfig+0x458>)
 8003ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef8:	f7fe f88a 	bl	8002010 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f00:	f7fe f886 	bl	8002010 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e185      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	4b2e      	ldr	r3, [pc, #184]	@ (8003fcc <HAL_RCC_OscConfig+0x458>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d106      	bne.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
 8003f26:	4b26      	ldr	r3, [pc, #152]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	4a25      	ldr	r2, [pc, #148]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f32:	e01c      	b.n	8003f6e <HAL_RCC_OscConfig+0x3fa>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d10c      	bne.n	8003f56 <HAL_RCC_OscConfig+0x3e2>
 8003f3c:	4b20      	ldr	r3, [pc, #128]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f40:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f48:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f54:	e00b      	b.n	8003f6e <HAL_RCC_OscConfig+0x3fa>
 8003f56:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5a:	4a19      	ldr	r2, [pc, #100]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f62:	4b17      	ldr	r3, [pc, #92]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f66:	4a16      	ldr	r2, [pc, #88]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d015      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fe f84b 	bl	8002010 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x420>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fe f847 	bl	8002010 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e144      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f94:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <HAL_RCC_OscConfig+0x44c>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ee      	beq.n	8003f7e <HAL_RCC_OscConfig+0x40a>
 8003fa0:	e01c      	b.n	8003fdc <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa2:	f7fe f835 	bl	8002010 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa8:	e012      	b.n	8003fd0 <HAL_RCC_OscConfig+0x45c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fe f831 	bl	8002010 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d909      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e12e      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	08005d58 	.word	0x08005d58
 8003fc8:	42470e80 	.word	0x42470e80
 8003fcc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd0:	4b95      	ldr	r3, [pc, #596]	@ (8004228 <HAL_RCC_OscConfig+0x6b4>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e6      	bne.n	8003faa <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	4b91      	ldr	r3, [pc, #580]	@ (8004228 <HAL_RCC_OscConfig+0x6b4>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	4a90      	ldr	r2, [pc, #576]	@ (8004228 <HAL_RCC_OscConfig+0x6b4>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <HAL_RCC_OscConfig+0x49c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d008      	beq.n	8004010 <HAL_RCC_OscConfig+0x49c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d004      	beq.n	8004010 <HAL_RCC_OscConfig+0x49c>
 8004006:	f640 6134 	movw	r1, #3636	@ 0xe34
 800400a:	4888      	ldr	r0, [pc, #544]	@ (800422c <HAL_RCC_OscConfig+0x6b8>)
 800400c:	f7fc fe75 	bl	8000cfa <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8101 	beq.w	800421c <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800401a:	4b83      	ldr	r3, [pc, #524]	@ (8004228 <HAL_RCC_OscConfig+0x6b4>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b08      	cmp	r3, #8
 8004024:	f000 80ba 	beq.w	800419c <HAL_RCC_OscConfig+0x628>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b02      	cmp	r3, #2
 800402e:	f040 809e 	bne.w	800416e <HAL_RCC_OscConfig+0x5fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_RCC_OscConfig+0x4da>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004042:	d004      	beq.n	800404e <HAL_RCC_OscConfig+0x4da>
 8004044:	f640 613d 	movw	r1, #3645	@ 0xe3d
 8004048:	4878      	ldr	r0, [pc, #480]	@ (800422c <HAL_RCC_OscConfig+0x6b8>)
 800404a:	f7fc fe56 	bl	8000cfa <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d903      	bls.n	800405e <HAL_RCC_OscConfig+0x4ea>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	2b3f      	cmp	r3, #63	@ 0x3f
 800405c:	d904      	bls.n	8004068 <HAL_RCC_OscConfig+0x4f4>
 800405e:	f640 613e 	movw	r1, #3646	@ 0xe3e
 8004062:	4872      	ldr	r0, [pc, #456]	@ (800422c <HAL_RCC_OscConfig+0x6b8>)
 8004064:	f7fc fe49 	bl	8000cfa <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	2b31      	cmp	r3, #49	@ 0x31
 800406e:	d904      	bls.n	800407a <HAL_RCC_OscConfig+0x506>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8004078:	d904      	bls.n	8004084 <HAL_RCC_OscConfig+0x510>
 800407a:	f640 613f 	movw	r1, #3647	@ 0xe3f
 800407e:	486b      	ldr	r0, [pc, #428]	@ (800422c <HAL_RCC_OscConfig+0x6b8>)
 8004080:	f7fc fe3b 	bl	8000cfa <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	2b02      	cmp	r3, #2
 800408a:	d010      	beq.n	80040ae <HAL_RCC_OscConfig+0x53a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	2b04      	cmp	r3, #4
 8004092:	d00c      	beq.n	80040ae <HAL_RCC_OscConfig+0x53a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	2b06      	cmp	r3, #6
 800409a:	d008      	beq.n	80040ae <HAL_RCC_OscConfig+0x53a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d004      	beq.n	80040ae <HAL_RCC_OscConfig+0x53a>
 80040a4:	f44f 6164 	mov.w	r1, #3648	@ 0xe40
 80040a8:	4860      	ldr	r0, [pc, #384]	@ (800422c <HAL_RCC_OscConfig+0x6b8>)
 80040aa:	f7fc fe26 	bl	8000cfa <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d903      	bls.n	80040be <HAL_RCC_OscConfig+0x54a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ba:	2b0f      	cmp	r3, #15
 80040bc:	d904      	bls.n	80040c8 <HAL_RCC_OscConfig+0x554>
 80040be:	f640 6141 	movw	r1, #3649	@ 0xe41
 80040c2:	485a      	ldr	r0, [pc, #360]	@ (800422c <HAL_RCC_OscConfig+0x6b8>)
 80040c4:	f7fc fe19 	bl	8000cfa <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d903      	bls.n	80040d8 <HAL_RCC_OscConfig+0x564>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	2b07      	cmp	r3, #7
 80040d6:	d904      	bls.n	80040e2 <HAL_RCC_OscConfig+0x56e>
 80040d8:	f640 6142 	movw	r1, #3650	@ 0xe42
 80040dc:	4853      	ldr	r0, [pc, #332]	@ (800422c <HAL_RCC_OscConfig+0x6b8>)
 80040de:	f7fc fe0c 	bl	8000cfa <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b53      	ldr	r3, [pc, #332]	@ (8004230 <HAL_RCC_OscConfig+0x6bc>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd ff92 	bl	8002010 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x58e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd ff8e 	bl	8002010 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e08d      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	4b49      	ldr	r3, [pc, #292]	@ (8004228 <HAL_RCC_OscConfig+0x6b4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x57c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	019b      	lsls	r3, r3, #6
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	3b01      	subs	r3, #1
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	071b      	lsls	r3, r3, #28
 800413a:	493b      	ldr	r1, [pc, #236]	@ (8004228 <HAL_RCC_OscConfig+0x6b4>)
 800413c:	4313      	orrs	r3, r2
 800413e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004140:	4b3b      	ldr	r3, [pc, #236]	@ (8004230 <HAL_RCC_OscConfig+0x6bc>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004146:	f7fd ff63 	bl	8002010 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x5ec>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414e:	f7fd ff5f 	bl	8002010 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e05e      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004160:	4b31      	ldr	r3, [pc, #196]	@ (8004228 <HAL_RCC_OscConfig+0x6b4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x5da>
 800416c:	e056      	b.n	800421c <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	4b30      	ldr	r3, [pc, #192]	@ (8004230 <HAL_RCC_OscConfig+0x6bc>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd ff4c 	bl	8002010 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x61a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417c:	f7fd ff48 	bl	8002010 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x61a>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e047      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	4b26      	ldr	r3, [pc, #152]	@ (8004228 <HAL_RCC_OscConfig+0x6b4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x608>
 800419a:	e03f      	b.n	800421c <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_OscConfig+0x634>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e03a      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <HAL_RCC_OscConfig+0x6b4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d030      	beq.n	8004218 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d129      	bne.n	8004218 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d122      	bne.n	8004218 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d119      	bne.n	8004218 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	3b01      	subs	r3, #1
 80041f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d10f      	bne.n	8004218 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d107      	bne.n	8004218 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_OscConfig+0x6a8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800
 800422c:	08005d58 	.word	0x08005d58
 8004230:	42470060 	.word	0x42470060

08004234 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e184      	b.n	8004550 <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a72      	ldr	r2, [pc, #456]	@ (8004414 <HAL_SPI_Init+0x1e0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_SPI_Init+0x44>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a70      	ldr	r2, [pc, #448]	@ (8004418 <HAL_SPI_Init+0x1e4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <HAL_SPI_Init+0x44>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a6f      	ldr	r2, [pc, #444]	@ (800441c <HAL_SPI_Init+0x1e8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_SPI_Init+0x44>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6d      	ldr	r2, [pc, #436]	@ (8004420 <HAL_SPI_Init+0x1ec>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_SPI_Init+0x44>
 800426e:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8004272:	486c      	ldr	r0, [pc, #432]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 8004274:	f7fc fd41 	bl	8000cfa <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_SPI_Init+0x60>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004288:	d004      	beq.n	8004294 <HAL_SPI_Init+0x60>
 800428a:	f240 1143 	movw	r1, #323	@ 0x143
 800428e:	4865      	ldr	r0, [pc, #404]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 8004290:	f7fc fd33 	bl	8000cfa <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00e      	beq.n	80042ba <HAL_SPI_Init+0x86>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a4:	d009      	beq.n	80042ba <HAL_SPI_Init+0x86>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ae:	d004      	beq.n	80042ba <HAL_SPI_Init+0x86>
 80042b0:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80042b4:	485b      	ldr	r0, [pc, #364]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 80042b6:	f7fc fd20 	bl	8000cfa <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c2:	d008      	beq.n	80042d6 <HAL_SPI_Init+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <HAL_SPI_Init+0xa2>
 80042cc:	f240 1145 	movw	r1, #325	@ 0x145
 80042d0:	4854      	ldr	r0, [pc, #336]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 80042d2:	f7fc fd12 	bl	8000cfa <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042de:	d00d      	beq.n	80042fc <HAL_SPI_Init+0xc8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <HAL_SPI_Init+0xc8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042f0:	d004      	beq.n	80042fc <HAL_SPI_Init+0xc8>
 80042f2:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 80042f6:	484b      	ldr	r0, [pc, #300]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 80042f8:	f7fc fcff 	bl	8000cfa <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d020      	beq.n	8004346 <HAL_SPI_Init+0x112>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d01c      	beq.n	8004346 <HAL_SPI_Init+0x112>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	2b10      	cmp	r3, #16
 8004312:	d018      	beq.n	8004346 <HAL_SPI_Init+0x112>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	2b18      	cmp	r3, #24
 800431a:	d014      	beq.n	8004346 <HAL_SPI_Init+0x112>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b20      	cmp	r3, #32
 8004322:	d010      	beq.n	8004346 <HAL_SPI_Init+0x112>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b28      	cmp	r3, #40	@ 0x28
 800432a:	d00c      	beq.n	8004346 <HAL_SPI_Init+0x112>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	2b30      	cmp	r3, #48	@ 0x30
 8004332:	d008      	beq.n	8004346 <HAL_SPI_Init+0x112>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	2b38      	cmp	r3, #56	@ 0x38
 800433a:	d004      	beq.n	8004346 <HAL_SPI_Init+0x112>
 800433c:	f240 1147 	movw	r1, #327	@ 0x147
 8004340:	4838      	ldr	r0, [pc, #224]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 8004342:	f7fc fcda 	bl	8000cfa <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d008      	beq.n	8004360 <HAL_SPI_Init+0x12c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	2b80      	cmp	r3, #128	@ 0x80
 8004354:	d004      	beq.n	8004360 <HAL_SPI_Init+0x12c>
 8004356:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800435a:	4832      	ldr	r0, [pc, #200]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 800435c:	f7fc fccd 	bl	8000cfa <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_SPI_Init+0x146>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	2b10      	cmp	r3, #16
 800436e:	d004      	beq.n	800437a <HAL_SPI_Init+0x146>
 8004370:	f240 1149 	movw	r1, #329	@ 0x149
 8004374:	482b      	ldr	r0, [pc, #172]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 8004376:	f7fc fcc0 	bl	8000cfa <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	d152      	bne.n	8004428 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_SPI_Init+0x168>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d004      	beq.n	800439c <HAL_SPI_Init+0x168>
 8004392:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8004396:	4823      	ldr	r0, [pc, #140]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 8004398:	f7fc fcaf 	bl	8000cfa <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_SPI_Init+0x182>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d004      	beq.n	80043b6 <HAL_SPI_Init+0x182>
 80043ac:	f240 114d 	movw	r1, #333	@ 0x14d
 80043b0:	481c      	ldr	r0, [pc, #112]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 80043b2:	f7fc fca2 	bl	8000cfa <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043be:	d125      	bne.n	800440c <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d05a      	beq.n	800447e <HAL_SPI_Init+0x24a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d056      	beq.n	800447e <HAL_SPI_Init+0x24a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d052      	beq.n	800447e <HAL_SPI_Init+0x24a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	2b18      	cmp	r3, #24
 80043de:	d04e      	beq.n	800447e <HAL_SPI_Init+0x24a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d04a      	beq.n	800447e <HAL_SPI_Init+0x24a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	2b28      	cmp	r3, #40	@ 0x28
 80043ee:	d046      	beq.n	800447e <HAL_SPI_Init+0x24a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2b30      	cmp	r3, #48	@ 0x30
 80043f6:	d042      	beq.n	800447e <HAL_SPI_Init+0x24a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	2b38      	cmp	r3, #56	@ 0x38
 80043fe:	d03e      	beq.n	800447e <HAL_SPI_Init+0x24a>
 8004400:	f240 1151 	movw	r1, #337	@ 0x151
 8004404:	4807      	ldr	r0, [pc, #28]	@ (8004424 <HAL_SPI_Init+0x1f0>)
 8004406:	f7fc fc78 	bl	8000cfa <assert_failed>
 800440a:	e038      	b.n	800447e <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	61da      	str	r2, [r3, #28]
 8004412:	e034      	b.n	800447e <HAL_SPI_Init+0x24a>
 8004414:	40013000 	.word	0x40013000
 8004418:	40003800 	.word	0x40003800
 800441c:	40003c00 	.word	0x40003c00
 8004420:	40013400 	.word	0x40013400
 8004424:	08005d94 	.word	0x08005d94
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_SPI_Init+0x23e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d01c      	beq.n	8004472 <HAL_SPI_Init+0x23e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	2b10      	cmp	r3, #16
 800443e:	d018      	beq.n	8004472 <HAL_SPI_Init+0x23e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	2b18      	cmp	r3, #24
 8004446:	d014      	beq.n	8004472 <HAL_SPI_Init+0x23e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	2b20      	cmp	r3, #32
 800444e:	d010      	beq.n	8004472 <HAL_SPI_Init+0x23e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	2b28      	cmp	r3, #40	@ 0x28
 8004456:	d00c      	beq.n	8004472 <HAL_SPI_Init+0x23e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	2b30      	cmp	r3, #48	@ 0x30
 800445e:	d008      	beq.n	8004472 <HAL_SPI_Init+0x23e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	2b38      	cmp	r3, #56	@ 0x38
 8004466:	d004      	beq.n	8004472 <HAL_SPI_Init+0x23e>
 8004468:	f240 115b 	movw	r1, #347	@ 0x15b
 800446c:	483a      	ldr	r0, [pc, #232]	@ (8004558 <HAL_SPI_Init+0x324>)
 800446e:	f7fc fc44 	bl	8000cfa <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fd fbe9 	bl	8001c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004502:	ea42 0103 	orr.w	r1, r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	f003 0104 	and.w	r1, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	f003 0210 	and.w	r2, r3, #16
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800453e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	08005d94 	.word	0x08005d94

0800455c <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d009      	beq.n	8004588 <HAL_SPI_Transmit+0x2c>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800457c:	d004      	beq.n	8004588 <HAL_SPI_Transmit+0x2c>
 800457e:	f240 3109 	movw	r1, #777	@ 0x309
 8004582:	4886      	ldr	r0, [pc, #536]	@ (800479c <HAL_SPI_Transmit+0x240>)
 8004584:	f7fc fbb9 	bl	8000cfa <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004588:	f7fd fd42 	bl	8002010 <HAL_GetTick>
 800458c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d001      	beq.n	80045a2 <HAL_SPI_Transmit+0x46>
  {
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
 80045a0:	e12c      	b.n	80047fc <HAL_SPI_Transmit+0x2a0>
  }

  if ((pData == NULL) || (Size == 0U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_SPI_Transmit+0x52>
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_SPI_Transmit+0x56>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e124      	b.n	80047fc <HAL_SPI_Transmit+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_SPI_Transmit+0x64>
 80045bc:	2302      	movs	r3, #2
 80045be:	e11d      	b.n	80047fc <HAL_SPI_Transmit+0x2a0>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2203      	movs	r2, #3
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800460e:	d10f      	bne.n	8004630 <HAL_SPI_Transmit+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800461e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800462e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463a:	2b40      	cmp	r3, #64	@ 0x40
 800463c:	d007      	beq.n	800464e <HAL_SPI_Transmit+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800464c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004656:	d152      	bne.n	80046fe <HAL_SPI_Transmit+0x1a2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_SPI_Transmit+0x10a>
 8004660:	8b7b      	ldrh	r3, [r7, #26]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d145      	bne.n	80046f2 <HAL_SPI_Transmit+0x196>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	881a      	ldrh	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	1c9a      	adds	r2, r3, #2
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800468a:	e032      	b.n	80046f2 <HAL_SPI_Transmit+0x196>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d112      	bne.n	80046c0 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469e:	881a      	ldrh	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	1c9a      	adds	r2, r3, #2
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046be:	e018      	b.n	80046f2 <HAL_SPI_Transmit+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046c0:	f7fd fca6 	bl	8002010 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d803      	bhi.n	80046d8 <HAL_SPI_Transmit+0x17c>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046d6:	d102      	bne.n	80046de <HAL_SPI_Transmit+0x182>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <HAL_SPI_Transmit+0x196>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e084      	b.n	80047fc <HAL_SPI_Transmit+0x2a0>
    while (hspi->TxXferCount > 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1c7      	bne.n	800468c <HAL_SPI_Transmit+0x130>
 80046fc:	e055      	b.n	80047aa <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_SPI_Transmit+0x1b0>
 8004706:	8b7b      	ldrh	r3, [r7, #26]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d149      	bne.n	80047a0 <HAL_SPI_Transmit+0x244>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004732:	e035      	b.n	80047a0 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b02      	cmp	r3, #2
 8004740:	d113      	bne.n	800476a <HAL_SPI_Transmit+0x20e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004768:	e01a      	b.n	80047a0 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800476a:	f7fd fc51 	bl	8002010 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d803      	bhi.n	8004782 <HAL_SPI_Transmit+0x226>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004780:	d102      	bne.n	8004788 <HAL_SPI_Transmit+0x22c>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10b      	bne.n	80047a0 <HAL_SPI_Transmit+0x244>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e02f      	b.n	80047fc <HAL_SPI_Transmit+0x2a0>
 800479c:	08005d94 	.word	0x08005d94
    while (hspi->TxXferCount > 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1c4      	bne.n	8004734 <HAL_SPI_Transmit+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa1a 	bl	8004be8 <SPI_EndRxTxTransaction>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_SPI_Transmit+0x29e>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_SPI_Transmit+0x2a0>
  }
  else
  {
    return HAL_OK;
 80047fa:	2300      	movs	r3, #0
  }
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]

  /* Check tx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004816:	2b00      	cmp	r3, #0
 8004818:	d104      	bne.n	8004824 <HAL_SPI_Transmit_DMA+0x20>
 800481a:	f240 6177 	movw	r1, #1655	@ 0x677
 800481e:	485a      	ldr	r0, [pc, #360]	@ (8004988 <HAL_SPI_Transmit_DMA+0x184>)
 8004820:	f7fc fa6b 	bl	8000cfa <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_SPI_Transmit_DMA+0x3c>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004834:	d004      	beq.n	8004840 <HAL_SPI_Transmit_DMA+0x3c>
 8004836:	f240 617a 	movw	r1, #1658	@ 0x67a
 800483a:	4853      	ldr	r0, [pc, #332]	@ (8004988 <HAL_SPI_Transmit_DMA+0x184>)
 800483c:	f7fc fa5d 	bl	8000cfa <assert_failed>

  if (hspi->State != HAL_SPI_STATE_READY)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d001      	beq.n	8004850 <HAL_SPI_Transmit_DMA+0x4c>
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
 800484e:	e097      	b.n	8004980 <HAL_SPI_Transmit_DMA+0x17c>
  }

  if ((pData == NULL) || (Size == 0U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_SPI_Transmit_DMA+0x58>
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_SPI_Transmit_DMA+0x5c>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e08f      	b.n	8004980 <HAL_SPI_Transmit_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_SPI_Transmit_DMA+0x6a>
 800486a:	2302      	movs	r3, #2
 800486c:	e088      	b.n	8004980 <HAL_SPI_Transmit_DMA+0x17c>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2203      	movs	r2, #3
 800487a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048bc:	d10f      	bne.n	80048de <HAL_SPI_Transmit_DMA+0xda>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e2:	4a2a      	ldr	r2, [pc, #168]	@ (800498c <HAL_SPI_Transmit_DMA+0x188>)
 80048e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ea:	4a29      	ldr	r2, [pc, #164]	@ (8004990 <HAL_SPI_Transmit_DMA+0x18c>)
 80048ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f2:	4a28      	ldr	r2, [pc, #160]	@ (8004994 <HAL_SPI_Transmit_DMA+0x190>)
 80048f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fa:	2200      	movs	r2, #0
 80048fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	4619      	mov	r1, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004914:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004916:	f7fd ff05 	bl	8002724 <HAL_DMA_Start_IT>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00b      	beq.n	8004938 <HAL_SPI_Transmit_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004924:	f043 0210 	orr.w	r2, r3, #16
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e023      	b.n	8004980 <HAL_SPI_Transmit_DMA+0x17c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004942:	2b40      	cmp	r3, #64	@ 0x40
 8004944:	d007      	beq.n	8004956 <HAL_SPI_Transmit_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004954:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0220 	orr.w	r2, r2, #32
 800496c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0202 	orr.w	r2, r2, #2
 800497c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	08005d94 	.word	0x08005d94
 800498c:	08004a7d 	.word	0x08004a7d
 8004990:	080049d5 	.word	0x080049d5
 8004994:	08004a99 	.word	0x08004a99

08004998 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e2:	f7fd fb15 	bl	8002010 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f6:	d03b      	beq.n	8004a70 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0220 	bic.w	r2, r2, #32
 8004a06:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0202 	bic.w	r2, r2, #2
 8004a16:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	2164      	movs	r1, #100	@ 0x64
 8004a1c:	6978      	ldr	r0, [r7, #20]
 8004a1e:	f000 f8e3 	bl	8004be8 <SPI_EndRxTxTransaction>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2200      	movs	r2, #0
 8004a56:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a68:	6978      	ldr	r0, [r7, #20]
 8004a6a:	f7ff ffa9 	bl	80049c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a6e:	e002      	b.n	8004a76 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004a70:	6978      	ldr	r0, [r7, #20]
 8004a72:	f7ff ff91 	bl	8004998 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff ff8e 	bl	80049ac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0203 	bic.w	r2, r2, #3
 8004ab4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aba:	f043 0210 	orr.w	r2, r3, #16
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff ff78 	bl	80049c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ae8:	f7fd fa92 	bl	8002010 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	4413      	add	r3, r2
 8004af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004af8:	f7fd fa8a 	bl	8002010 <HAL_GetTick>
 8004afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004afe:	4b39      	ldr	r3, [pc, #228]	@ (8004be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	015b      	lsls	r3, r3, #5
 8004b04:	0d1b      	lsrs	r3, r3, #20
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	fb02 f303 	mul.w	r3, r2, r3
 8004b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b0e:	e055      	b.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b16:	d051      	beq.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b18:	f7fd fa7a 	bl	8002010 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d902      	bls.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d13d      	bne.n	8004baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b46:	d111      	bne.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b50:	d004      	beq.n	8004b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b5a:	d107      	bne.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b74:	d10f      	bne.n	8004b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e018      	b.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	e002      	b.n	8004bbc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d19a      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000020 	.word	0x20000020

08004be8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff ff6a 	bl	8004ad8 <SPI_WaitFlagStateUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0e:	f043 0220 	orr.w	r2, r3, #32
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e032      	b.n	8004c80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <SPI_EndRxTxTransaction+0xa0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c8c <SPI_EndRxTxTransaction+0xa4>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	0d5b      	lsrs	r3, r3, #21
 8004c26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c38:	d112      	bne.n	8004c60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2180      	movs	r1, #128	@ 0x80
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f7ff ff47 	bl	8004ad8 <SPI_WaitFlagStateUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d016      	beq.n	8004c7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c54:	f043 0220 	orr.w	r2, r3, #32
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e00f      	b.n	8004c80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c76:	2b80      	cmp	r3, #128	@ 0x80
 8004c78:	d0f2      	beq.n	8004c60 <SPI_EndRxTxTransaction+0x78>
 8004c7a:	e000      	b.n	8004c7e <SPI_EndRxTxTransaction+0x96>
        break;
 8004c7c:	bf00      	nop
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000020 	.word	0x20000020
 8004c8c:	165e9f81 	.word	0x165e9f81

08004c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e0ed      	b.n	8004e7e <HAL_TIM_Base_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a78      	ldr	r2, [pc, #480]	@ (8004e88 <HAL_TIM_Base_Init+0x1f8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d045      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb4:	d040      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a74      	ldr	r2, [pc, #464]	@ (8004e8c <HAL_TIM_Base_Init+0x1fc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d03b      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a72      	ldr	r2, [pc, #456]	@ (8004e90 <HAL_TIM_Base_Init+0x200>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d036      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a71      	ldr	r2, [pc, #452]	@ (8004e94 <HAL_TIM_Base_Init+0x204>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d031      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a6f      	ldr	r2, [pc, #444]	@ (8004e98 <HAL_TIM_Base_Init+0x208>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d02c      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e9c <HAL_TIM_Base_Init+0x20c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d027      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a6c      	ldr	r2, [pc, #432]	@ (8004ea0 <HAL_TIM_Base_Init+0x210>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d022      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a6b      	ldr	r2, [pc, #428]	@ (8004ea4 <HAL_TIM_Base_Init+0x214>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d01d      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a69      	ldr	r2, [pc, #420]	@ (8004ea8 <HAL_TIM_Base_Init+0x218>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d018      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a68      	ldr	r2, [pc, #416]	@ (8004eac <HAL_TIM_Base_Init+0x21c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d013      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a66      	ldr	r2, [pc, #408]	@ (8004eb0 <HAL_TIM_Base_Init+0x220>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00e      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a65      	ldr	r2, [pc, #404]	@ (8004eb4 <HAL_TIM_Base_Init+0x224>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a63      	ldr	r2, [pc, #396]	@ (8004eb8 <HAL_TIM_Base_Init+0x228>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d004      	beq.n	8004d38 <HAL_TIM_Base_Init+0xa8>
 8004d2e:	f240 1113 	movw	r1, #275	@ 0x113
 8004d32:	4862      	ldr	r0, [pc, #392]	@ (8004ebc <HAL_TIM_Base_Init+0x22c>)
 8004d34:	f7fb ffe1 	bl	8000cfa <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d014      	beq.n	8004d6a <HAL_TIM_Base_Init+0xda>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d010      	beq.n	8004d6a <HAL_TIM_Base_Init+0xda>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d00c      	beq.n	8004d6a <HAL_TIM_Base_Init+0xda>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b40      	cmp	r3, #64	@ 0x40
 8004d56:	d008      	beq.n	8004d6a <HAL_TIM_Base_Init+0xda>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b60      	cmp	r3, #96	@ 0x60
 8004d5e:	d004      	beq.n	8004d6a <HAL_TIM_Base_Init+0xda>
 8004d60:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8004d64:	4855      	ldr	r0, [pc, #340]	@ (8004ebc <HAL_TIM_Base_Init+0x22c>)
 8004d66:	f7fb ffc8 	bl	8000cfa <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00e      	beq.n	8004d90 <HAL_TIM_Base_Init+0x100>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d7a:	d009      	beq.n	8004d90 <HAL_TIM_Base_Init+0x100>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d84:	d004      	beq.n	8004d90 <HAL_TIM_Base_Init+0x100>
 8004d86:	f240 1115 	movw	r1, #277	@ 0x115
 8004d8a:	484c      	ldr	r0, [pc, #304]	@ (8004ebc <HAL_TIM_Base_Init+0x22c>)
 8004d8c:	f7fb ffb5 	bl	8000cfa <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d98:	d004      	beq.n	8004da4 <HAL_TIM_Base_Init+0x114>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8004e94 <HAL_TIM_Base_Init+0x204>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_Base_Init+0x124>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e00e      	b.n	8004dd2 <HAL_TIM_Base_Init+0x142>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d006      	beq.n	8004dca <HAL_TIM_Base_Init+0x13a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc4:	d201      	bcs.n	8004dca <HAL_TIM_Base_Init+0x13a>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <HAL_TIM_Base_Init+0x13c>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <HAL_TIM_Base_Init+0x150>
 8004dd6:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8004dda:	4838      	ldr	r0, [pc, #224]	@ (8004ebc <HAL_TIM_Base_Init+0x22c>)
 8004ddc:	f7fb ff8d 	bl	8000cfa <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <HAL_TIM_Base_Init+0x16a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b80      	cmp	r3, #128	@ 0x80
 8004dee:	d004      	beq.n	8004dfa <HAL_TIM_Base_Init+0x16a>
 8004df0:	f240 1117 	movw	r1, #279	@ 0x117
 8004df4:	4831      	ldr	r0, [pc, #196]	@ (8004ebc <HAL_TIM_Base_Init+0x22c>)
 8004df6:	f7fb ff80 	bl	8000cfa <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fc ffa8 	bl	8001d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f000 f96c 	bl	8005104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40001000 	.word	0x40001000
 8004e9c:	40001400 	.word	0x40001400
 8004ea0:	40010400 	.word	0x40010400
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40014400 	.word	0x40014400
 8004eac:	40014800 	.word	0x40014800
 8004eb0:	40001800 	.word	0x40001800
 8004eb4:	40001c00 	.word	0x40001c00
 8004eb8:	40002000 	.word	0x40002000
 8004ebc:	08005dcc 	.word	0x08005dcc

08004ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d020      	beq.n	8004f24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01b      	beq.n	8004f24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0202 	mvn.w	r2, #2
 8004ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8dc 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f8ce 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f8df 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d020      	beq.n	8004f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01b      	beq.n	8004f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0204 	mvn.w	r2, #4
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2202      	movs	r2, #2
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f8b6 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f8a8 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f8b9 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d020      	beq.n	8004fbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01b      	beq.n	8004fbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0208 	mvn.w	r2, #8
 8004f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2204      	movs	r2, #4
 8004f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f890 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f882 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f893 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d020      	beq.n	8005008 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01b      	beq.n	8005008 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0210 	mvn.w	r2, #16
 8004fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f86a 	bl	80050c8 <HAL_TIM_IC_CaptureCallback>
 8004ff4:	e005      	b.n	8005002 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f85c 	bl	80050b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f86d 	bl	80050dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0201 	mvn.w	r2, #1
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f83a 	bl	80050a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00c      	beq.n	8005050 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f9e8 	bl	8005420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f83e 	bl	80050f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00c      	beq.n	8005098 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0220 	mvn.w	r2, #32
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f9ba 	bl	800540c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a43      	ldr	r2, [pc, #268]	@ (8005224 <TIM_Base_SetConfig+0x120>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005122:	d00f      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a40      	ldr	r2, [pc, #256]	@ (8005228 <TIM_Base_SetConfig+0x124>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00b      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3f      	ldr	r2, [pc, #252]	@ (800522c <TIM_Base_SetConfig+0x128>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d007      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a3e      	ldr	r2, [pc, #248]	@ (8005230 <TIM_Base_SetConfig+0x12c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3d      	ldr	r2, [pc, #244]	@ (8005234 <TIM_Base_SetConfig+0x130>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d108      	bne.n	8005156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a32      	ldr	r2, [pc, #200]	@ (8005224 <TIM_Base_SetConfig+0x120>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d02b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005164:	d027      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2f      	ldr	r2, [pc, #188]	@ (8005228 <TIM_Base_SetConfig+0x124>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d023      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2e      	ldr	r2, [pc, #184]	@ (800522c <TIM_Base_SetConfig+0x128>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01f      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2d      	ldr	r2, [pc, #180]	@ (8005230 <TIM_Base_SetConfig+0x12c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2c      	ldr	r2, [pc, #176]	@ (8005234 <TIM_Base_SetConfig+0x130>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d017      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2b      	ldr	r2, [pc, #172]	@ (8005238 <TIM_Base_SetConfig+0x134>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2a      	ldr	r2, [pc, #168]	@ (800523c <TIM_Base_SetConfig+0x138>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a29      	ldr	r2, [pc, #164]	@ (8005240 <TIM_Base_SetConfig+0x13c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a28      	ldr	r2, [pc, #160]	@ (8005244 <TIM_Base_SetConfig+0x140>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a27      	ldr	r2, [pc, #156]	@ (8005248 <TIM_Base_SetConfig+0x144>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a26      	ldr	r2, [pc, #152]	@ (800524c <TIM_Base_SetConfig+0x148>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005224 <TIM_Base_SetConfig+0x120>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_Base_SetConfig+0xf2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a10      	ldr	r2, [pc, #64]	@ (8005234 <TIM_Base_SetConfig+0x130>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d103      	bne.n	80051fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f043 0204 	orr.w	r2, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40010400 	.word	0x40010400
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400
 8005240:	40014800 	.word	0x40014800
 8005244:	40001800 	.word	0x40001800
 8005248:	40001c00 	.word	0x40001c00
 800524c:	40002000 	.word	0x40002000

08005250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a61      	ldr	r2, [pc, #388]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d027      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800526c:	d022      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a5d      	ldr	r2, [pc, #372]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d01d      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a5b      	ldr	r2, [pc, #364]	@ (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d018      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a5a      	ldr	r2, [pc, #360]	@ (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a58      	ldr	r2, [pc, #352]	@ (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a57      	ldr	r2, [pc, #348]	@ (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a55      	ldr	r2, [pc, #340]	@ (80053fc <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80052aa:	f240 71a9 	movw	r1, #1961	@ 0x7a9
 80052ae:	4854      	ldr	r0, [pc, #336]	@ (8005400 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80052b0:	f7fb fd23 	bl	8000cfa <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d020      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d01c      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d018      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b30      	cmp	r3, #48	@ 0x30
 80052d2:	d014      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b40      	cmp	r3, #64	@ 0x40
 80052da:	d010      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b50      	cmp	r3, #80	@ 0x50
 80052e2:	d00c      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b60      	cmp	r3, #96	@ 0x60
 80052ea:	d008      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b70      	cmp	r3, #112	@ 0x70
 80052f2:	d004      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80052f4:	f240 71aa 	movw	r1, #1962	@ 0x7aa
 80052f8:	4841      	ldr	r0, [pc, #260]	@ (8005400 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80052fa:	f7fb fcfe 	bl	8000cfa <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b80      	cmp	r3, #128	@ 0x80
 8005304:	d008      	beq.n	8005318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800530e:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8005312:	483b      	ldr	r0, [pc, #236]	@ (8005400 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8005314:	f7fb fcf1 	bl	8000cfa <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005322:	2302      	movs	r3, #2
 8005324:	e05a      	b.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1f      	ldr	r2, [pc, #124]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d022      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005372:	d01d      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d018      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1a      	ldr	r2, [pc, #104]	@ (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a18      	ldr	r2, [pc, #96]	@ (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00e      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a19      	ldr	r2, [pc, #100]	@ (80053fc <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a18      	ldr	r2, [pc, #96]	@ (8005404 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a17      	ldr	r2, [pc, #92]	@ (8005408 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d10c      	bne.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40001000 	.word	0x40001000
 80053f8:	40001400 	.word	0x40001400
 80053fc:	40010400 	.word	0x40010400
 8005400:	08005e04 	.word	0x08005e04
 8005404:	40014000 	.word	0x40014000
 8005408:	40001800 	.word	0x40001800

0800540c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0c1      	b.n	80055ca <HAL_UART_Init+0x196>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d03b      	beq.n	80054c6 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a60      	ldr	r2, [pc, #384]	@ (80055d4 <HAL_UART_Init+0x1a0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d01d      	beq.n	8005494 <HAL_UART_Init+0x60>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a5e      	ldr	r2, [pc, #376]	@ (80055d8 <HAL_UART_Init+0x1a4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d018      	beq.n	8005494 <HAL_UART_Init+0x60>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a5d      	ldr	r2, [pc, #372]	@ (80055dc <HAL_UART_Init+0x1a8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <HAL_UART_Init+0x60>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a5b      	ldr	r2, [pc, #364]	@ (80055e0 <HAL_UART_Init+0x1ac>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00e      	beq.n	8005494 <HAL_UART_Init+0x60>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a5a      	ldr	r2, [pc, #360]	@ (80055e4 <HAL_UART_Init+0x1b0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_UART_Init+0x60>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a58      	ldr	r2, [pc, #352]	@ (80055e8 <HAL_UART_Init+0x1b4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_UART_Init+0x60>
 800548a:	f240 1173 	movw	r1, #371	@ 0x173
 800548e:	4857      	ldr	r0, [pc, #348]	@ (80055ec <HAL_UART_Init+0x1b8>)
 8005490:	f7fb fc33 	bl	8000cfa <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d037      	beq.n	800550c <HAL_UART_Init+0xd8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054a4:	d032      	beq.n	800550c <HAL_UART_Init+0xd8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ae:	d02d      	beq.n	800550c <HAL_UART_Init+0xd8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054b8:	d028      	beq.n	800550c <HAL_UART_Init+0xd8>
 80054ba:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 80054be:	484b      	ldr	r0, [pc, #300]	@ (80055ec <HAL_UART_Init+0x1b8>)
 80054c0:	f7fb fc1b 	bl	8000cfa <assert_failed>
 80054c4:	e022      	b.n	800550c <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a42      	ldr	r2, [pc, #264]	@ (80055d4 <HAL_UART_Init+0x1a0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d01d      	beq.n	800550c <HAL_UART_Init+0xd8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a40      	ldr	r2, [pc, #256]	@ (80055d8 <HAL_UART_Init+0x1a4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d018      	beq.n	800550c <HAL_UART_Init+0xd8>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a3f      	ldr	r2, [pc, #252]	@ (80055dc <HAL_UART_Init+0x1a8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d013      	beq.n	800550c <HAL_UART_Init+0xd8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a3d      	ldr	r2, [pc, #244]	@ (80055e0 <HAL_UART_Init+0x1ac>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00e      	beq.n	800550c <HAL_UART_Init+0xd8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a3c      	ldr	r2, [pc, #240]	@ (80055e4 <HAL_UART_Init+0x1b0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d009      	beq.n	800550c <HAL_UART_Init+0xd8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a3a      	ldr	r2, [pc, #232]	@ (80055e8 <HAL_UART_Init+0x1b4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_UART_Init+0xd8>
 8005502:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8005506:	4839      	ldr	r0, [pc, #228]	@ (80055ec <HAL_UART_Init+0x1b8>)
 8005508:	f7fb fbf7 	bl	8000cfa <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d009      	beq.n	8005528 <HAL_UART_Init+0xf4>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551c:	d004      	beq.n	8005528 <HAL_UART_Init+0xf4>
 800551e:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8005522:	4832      	ldr	r0, [pc, #200]	@ (80055ec <HAL_UART_Init+0x1b8>)
 8005524:	f7fb fbe9 	bl	8000cfa <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <HAL_UART_Init+0x110>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005538:	d004      	beq.n	8005544 <HAL_UART_Init+0x110>
 800553a:	f240 117b 	movw	r1, #379	@ 0x17b
 800553e:	482b      	ldr	r0, [pc, #172]	@ (80055ec <HAL_UART_Init+0x1b8>)
 8005540:	f7fb fbdb 	bl	8000cfa <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fc fc2b 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2224      	movs	r2, #36	@ 0x24
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005574:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f83a 	bl	80055f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800558a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695a      	ldr	r2, [r3, #20]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800559a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40011000 	.word	0x40011000
 80055d8:	40004400 	.word	0x40004400
 80055dc:	40004800 	.word	0x40004800
 80055e0:	40004c00 	.word	0x40004c00
 80055e4:	40005000 	.word	0x40005000
 80055e8:	40011400 	.word	0x40011400
 80055ec:	08005e40 	.word	0x08005e40

080055f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f4:	b0c0      	sub	sp, #256	@ 0x100
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	4bcf      	ldr	r3, [pc, #828]	@ (8005940 <UART_SetConfig+0x350>)
 8005604:	429a      	cmp	r2, r3
 8005606:	d904      	bls.n	8005612 <UART_SetConfig+0x22>
 8005608:	f640 6199 	movw	r1, #3737	@ 0xe99
 800560c:	48cd      	ldr	r0, [pc, #820]	@ (8005944 <UART_SetConfig+0x354>)
 800560e:	f7fb fb74 	bl	8000cfa <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <UART_SetConfig+0x42>
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005626:	d004      	beq.n	8005632 <UART_SetConfig+0x42>
 8005628:	f640 619a 	movw	r1, #3738	@ 0xe9a
 800562c:	48c5      	ldr	r0, [pc, #788]	@ (8005944 <UART_SetConfig+0x354>)
 800562e:	f7fb fb64 	bl	8000cfa <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <UART_SetConfig+0x6e>
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005646:	d00a      	beq.n	800565e <UART_SetConfig+0x6e>
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005652:	d004      	beq.n	800565e <UART_SetConfig+0x6e>
 8005654:	f640 619b 	movw	r1, #3739	@ 0xe9b
 8005658:	48ba      	ldr	r0, [pc, #744]	@ (8005944 <UART_SetConfig+0x354>)
 800565a:	f7fb fb4e 	bl	8000cfa <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8005668:	4013      	ands	r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <UART_SetConfig+0x88>
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <UART_SetConfig+0x92>
 8005678:	f640 619c 	movw	r1, #3740	@ 0xe9c
 800567c:	48b1      	ldr	r0, [pc, #708]	@ (8005944 <UART_SetConfig+0x354>)
 800567e:	f7fb fb3c 	bl	8000cfa <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005692:	68d9      	ldr	r1, [r3, #12]
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	ea40 0301 	orr.w	r3, r0, r1
 800569e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056ce:	f021 010c 	bic.w	r1, r1, #12
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056dc:	430b      	orrs	r3, r1
 80056de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f0:	6999      	ldr	r1, [r3, #24]
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	ea40 0301 	orr.w	r3, r0, r1
 80056fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4b90      	ldr	r3, [pc, #576]	@ (8005948 <UART_SetConfig+0x358>)
 8005706:	429a      	cmp	r2, r3
 8005708:	d005      	beq.n	8005716 <UART_SetConfig+0x126>
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b8e      	ldr	r3, [pc, #568]	@ (800594c <UART_SetConfig+0x35c>)
 8005712:	429a      	cmp	r2, r3
 8005714:	d104      	bne.n	8005720 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005716:	f7fd ffe9 	bl	80036ec <HAL_RCC_GetPCLK2Freq>
 800571a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800571e:	e003      	b.n	8005728 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005720:	f7fd ffd0 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 8005724:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005732:	f040 810f 	bne.w	8005954 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573a:	2200      	movs	r2, #0
 800573c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005740:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005744:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005748:	4622      	mov	r2, r4
 800574a:	462b      	mov	r3, r5
 800574c:	1891      	adds	r1, r2, r2
 800574e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005750:	415b      	adcs	r3, r3
 8005752:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005754:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005758:	4621      	mov	r1, r4
 800575a:	eb12 0801 	adds.w	r8, r2, r1
 800575e:	4629      	mov	r1, r5
 8005760:	eb43 0901 	adc.w	r9, r3, r1
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005770:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005774:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005778:	4690      	mov	r8, r2
 800577a:	4699      	mov	r9, r3
 800577c:	4623      	mov	r3, r4
 800577e:	eb18 0303 	adds.w	r3, r8, r3
 8005782:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005786:	462b      	mov	r3, r5
 8005788:	eb49 0303 	adc.w	r3, r9, r3
 800578c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800579c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057a0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057a4:	460b      	mov	r3, r1
 80057a6:	18db      	adds	r3, r3, r3
 80057a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80057aa:	4613      	mov	r3, r2
 80057ac:	eb42 0303 	adc.w	r3, r2, r3
 80057b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057b6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057ba:	f7fa fd23 	bl	8000204 <__aeabi_uldivmod>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4b63      	ldr	r3, [pc, #396]	@ (8005950 <UART_SetConfig+0x360>)
 80057c4:	fba3 2302 	umull	r2, r3, r3, r2
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	011c      	lsls	r4, r3, #4
 80057cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057d6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057da:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057de:	4642      	mov	r2, r8
 80057e0:	464b      	mov	r3, r9
 80057e2:	1891      	adds	r1, r2, r2
 80057e4:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057e6:	415b      	adcs	r3, r3
 80057e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057ee:	4641      	mov	r1, r8
 80057f0:	eb12 0a01 	adds.w	sl, r2, r1
 80057f4:	4649      	mov	r1, r9
 80057f6:	eb43 0b01 	adc.w	fp, r3, r1
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005806:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800580a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800580e:	4692      	mov	sl, r2
 8005810:	469b      	mov	fp, r3
 8005812:	4643      	mov	r3, r8
 8005814:	eb1a 0303 	adds.w	r3, sl, r3
 8005818:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800581c:	464b      	mov	r3, r9
 800581e:	eb4b 0303 	adc.w	r3, fp, r3
 8005822:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005832:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005836:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800583a:	460b      	mov	r3, r1
 800583c:	18db      	adds	r3, r3, r3
 800583e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005840:	4613      	mov	r3, r2
 8005842:	eb42 0303 	adc.w	r3, r2, r3
 8005846:	647b      	str	r3, [r7, #68]	@ 0x44
 8005848:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800584c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005850:	f7fa fcd8 	bl	8000204 <__aeabi_uldivmod>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4611      	mov	r1, r2
 800585a:	4b3d      	ldr	r3, [pc, #244]	@ (8005950 <UART_SetConfig+0x360>)
 800585c:	fba3 2301 	umull	r2, r3, r3, r1
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	2264      	movs	r2, #100	@ 0x64
 8005864:	fb02 f303 	mul.w	r3, r2, r3
 8005868:	1acb      	subs	r3, r1, r3
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005870:	4b37      	ldr	r3, [pc, #220]	@ (8005950 <UART_SetConfig+0x360>)
 8005872:	fba3 2302 	umull	r2, r3, r3, r2
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800587e:	441c      	add	r4, r3
 8005880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005884:	2200      	movs	r2, #0
 8005886:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800588a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800588e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005892:	4642      	mov	r2, r8
 8005894:	464b      	mov	r3, r9
 8005896:	1891      	adds	r1, r2, r2
 8005898:	63b9      	str	r1, [r7, #56]	@ 0x38
 800589a:	415b      	adcs	r3, r3
 800589c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800589e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058a2:	4641      	mov	r1, r8
 80058a4:	1851      	adds	r1, r2, r1
 80058a6:	6339      	str	r1, [r7, #48]	@ 0x30
 80058a8:	4649      	mov	r1, r9
 80058aa:	414b      	adcs	r3, r1
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058ba:	4659      	mov	r1, fp
 80058bc:	00cb      	lsls	r3, r1, #3
 80058be:	4651      	mov	r1, sl
 80058c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c4:	4651      	mov	r1, sl
 80058c6:	00ca      	lsls	r2, r1, #3
 80058c8:	4610      	mov	r0, r2
 80058ca:	4619      	mov	r1, r3
 80058cc:	4603      	mov	r3, r0
 80058ce:	4642      	mov	r2, r8
 80058d0:	189b      	adds	r3, r3, r2
 80058d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058d6:	464b      	mov	r3, r9
 80058d8:	460a      	mov	r2, r1
 80058da:	eb42 0303 	adc.w	r3, r2, r3
 80058de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058ee:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058f6:	460b      	mov	r3, r1
 80058f8:	18db      	adds	r3, r3, r3
 80058fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058fc:	4613      	mov	r3, r2
 80058fe:	eb42 0303 	adc.w	r3, r2, r3
 8005902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005904:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005908:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800590c:	f7fa fc7a 	bl	8000204 <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <UART_SetConfig+0x360>)
 8005916:	fba3 1302 	umull	r1, r3, r3, r2
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	2164      	movs	r1, #100	@ 0x64
 800591e:	fb01 f303 	mul.w	r3, r1, r3
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	3332      	adds	r3, #50	@ 0x32
 8005928:	4a09      	ldr	r2, [pc, #36]	@ (8005950 <UART_SetConfig+0x360>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	f003 0207 	and.w	r2, r3, #7
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4422      	add	r2, r4
 800593c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800593e:	e109      	b.n	8005b54 <UART_SetConfig+0x564>
 8005940:	00a037a0 	.word	0x00a037a0
 8005944:	08005e40 	.word	0x08005e40
 8005948:	40011000 	.word	0x40011000
 800594c:	40011400 	.word	0x40011400
 8005950:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005958:	2200      	movs	r2, #0
 800595a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800595e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005962:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005966:	4642      	mov	r2, r8
 8005968:	464b      	mov	r3, r9
 800596a:	1891      	adds	r1, r2, r2
 800596c:	6239      	str	r1, [r7, #32]
 800596e:	415b      	adcs	r3, r3
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
 8005972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005976:	4641      	mov	r1, r8
 8005978:	1854      	adds	r4, r2, r1
 800597a:	4649      	mov	r1, r9
 800597c:	eb43 0501 	adc.w	r5, r3, r1
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	f04f 0300 	mov.w	r3, #0
 8005988:	00eb      	lsls	r3, r5, #3
 800598a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800598e:	00e2      	lsls	r2, r4, #3
 8005990:	4614      	mov	r4, r2
 8005992:	461d      	mov	r5, r3
 8005994:	4643      	mov	r3, r8
 8005996:	18e3      	adds	r3, r4, r3
 8005998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800599c:	464b      	mov	r3, r9
 800599e:	eb45 0303 	adc.w	r3, r5, r3
 80059a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059c2:	4629      	mov	r1, r5
 80059c4:	008b      	lsls	r3, r1, #2
 80059c6:	4621      	mov	r1, r4
 80059c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059cc:	4621      	mov	r1, r4
 80059ce:	008a      	lsls	r2, r1, #2
 80059d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059d4:	f7fa fc16 	bl	8000204 <__aeabi_uldivmod>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4b60      	ldr	r3, [pc, #384]	@ (8005b60 <UART_SetConfig+0x570>)
 80059de:	fba3 2302 	umull	r2, r3, r3, r2
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	011c      	lsls	r4, r3, #4
 80059e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059f8:	4642      	mov	r2, r8
 80059fa:	464b      	mov	r3, r9
 80059fc:	1891      	adds	r1, r2, r2
 80059fe:	61b9      	str	r1, [r7, #24]
 8005a00:	415b      	adcs	r3, r3
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a08:	4641      	mov	r1, r8
 8005a0a:	1851      	adds	r1, r2, r1
 8005a0c:	6139      	str	r1, [r7, #16]
 8005a0e:	4649      	mov	r1, r9
 8005a10:	414b      	adcs	r3, r1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a20:	4659      	mov	r1, fp
 8005a22:	00cb      	lsls	r3, r1, #3
 8005a24:	4651      	mov	r1, sl
 8005a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a2a:	4651      	mov	r1, sl
 8005a2c:	00ca      	lsls	r2, r1, #3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	4603      	mov	r3, r0
 8005a34:	4642      	mov	r2, r8
 8005a36:	189b      	adds	r3, r3, r2
 8005a38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a3c:	464b      	mov	r3, r9
 8005a3e:	460a      	mov	r2, r1
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a60:	4649      	mov	r1, r9
 8005a62:	008b      	lsls	r3, r1, #2
 8005a64:	4641      	mov	r1, r8
 8005a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a6a:	4641      	mov	r1, r8
 8005a6c:	008a      	lsls	r2, r1, #2
 8005a6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a72:	f7fa fbc7 	bl	8000204 <__aeabi_uldivmod>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4b38      	ldr	r3, [pc, #224]	@ (8005b60 <UART_SetConfig+0x570>)
 8005a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2264      	movs	r2, #100	@ 0x64
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	1acb      	subs	r3, r1, r3
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	3332      	adds	r3, #50	@ 0x32
 8005a90:	4a33      	ldr	r2, [pc, #204]	@ (8005b60 <UART_SetConfig+0x570>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a9c:	441c      	add	r4, r3
 8005a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005aa6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005aa8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005aac:	4642      	mov	r2, r8
 8005aae:	464b      	mov	r3, r9
 8005ab0:	1891      	adds	r1, r2, r2
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	415b      	adcs	r3, r3
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005abc:	4641      	mov	r1, r8
 8005abe:	1851      	adds	r1, r2, r1
 8005ac0:	6039      	str	r1, [r7, #0]
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	414b      	adcs	r3, r1
 8005ac6:	607b      	str	r3, [r7, #4]
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ad4:	4659      	mov	r1, fp
 8005ad6:	00cb      	lsls	r3, r1, #3
 8005ad8:	4651      	mov	r1, sl
 8005ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ade:	4651      	mov	r1, sl
 8005ae0:	00ca      	lsls	r2, r1, #3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4642      	mov	r2, r8
 8005aea:	189b      	adds	r3, r3, r2
 8005aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aee:	464b      	mov	r3, r9
 8005af0:	460a      	mov	r2, r1
 8005af2:	eb42 0303 	adc.w	r3, r2, r3
 8005af6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b02:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b10:	4649      	mov	r1, r9
 8005b12:	008b      	lsls	r3, r1, #2
 8005b14:	4641      	mov	r1, r8
 8005b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	008a      	lsls	r2, r1, #2
 8005b1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b22:	f7fa fb6f 	bl	8000204 <__aeabi_uldivmod>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b60 <UART_SetConfig+0x570>)
 8005b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	2164      	movs	r1, #100	@ 0x64
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	3332      	adds	r3, #50	@ 0x32
 8005b3e:	4a08      	ldr	r2, [pc, #32]	@ (8005b60 <UART_SetConfig+0x570>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	f003 020f 	and.w	r2, r3, #15
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4422      	add	r2, r4
 8005b52:	609a      	str	r2, [r3, #8]
}
 8005b54:	bf00      	nop
 8005b56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b60:	51eb851f 	.word	0x51eb851f

08005b64 <memset>:
 8005b64:	4402      	add	r2, r0
 8005b66:	4603      	mov	r3, r0
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <memset+0xa>
 8005b6c:	4770      	bx	lr
 8005b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b72:	e7f9      	b.n	8005b68 <memset+0x4>

08005b74 <__libc_init_array>:
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	4d0d      	ldr	r5, [pc, #52]	@ (8005bac <__libc_init_array+0x38>)
 8005b78:	4c0d      	ldr	r4, [pc, #52]	@ (8005bb0 <__libc_init_array+0x3c>)
 8005b7a:	1b64      	subs	r4, r4, r5
 8005b7c:	10a4      	asrs	r4, r4, #2
 8005b7e:	2600      	movs	r6, #0
 8005b80:	42a6      	cmp	r6, r4
 8005b82:	d109      	bne.n	8005b98 <__libc_init_array+0x24>
 8005b84:	4d0b      	ldr	r5, [pc, #44]	@ (8005bb4 <__libc_init_array+0x40>)
 8005b86:	4c0c      	ldr	r4, [pc, #48]	@ (8005bb8 <__libc_init_array+0x44>)
 8005b88:	f000 f818 	bl	8005bbc <_init>
 8005b8c:	1b64      	subs	r4, r4, r5
 8005b8e:	10a4      	asrs	r4, r4, #2
 8005b90:	2600      	movs	r6, #0
 8005b92:	42a6      	cmp	r6, r4
 8005b94:	d105      	bne.n	8005ba2 <__libc_init_array+0x2e>
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9c:	4798      	blx	r3
 8005b9e:	3601      	adds	r6, #1
 8005ba0:	e7ee      	b.n	8005b80 <__libc_init_array+0xc>
 8005ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba6:	4798      	blx	r3
 8005ba8:	3601      	adds	r6, #1
 8005baa:	e7f2      	b.n	8005b92 <__libc_init_array+0x1e>
 8005bac:	08010730 	.word	0x08010730
 8005bb0:	08010730 	.word	0x08010730
 8005bb4:	08010730 	.word	0x08010730
 8005bb8:	08010734 	.word	0x08010734

08005bbc <_init>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	bf00      	nop
 8005bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc2:	bc08      	pop	{r3}
 8005bc4:	469e      	mov	lr, r3
 8005bc6:	4770      	bx	lr

08005bc8 <_fini>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	bf00      	nop
 8005bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bce:	bc08      	pop	{r3}
 8005bd0:	469e      	mov	lr, r3
 8005bd2:	4770      	bx	lr
